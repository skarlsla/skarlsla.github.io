<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://skarlsla.github.io/"/>
  <updated>2019-05-08T03:05:50.302Z</updated>
  <id>https://skarlsla.github.io/</id>
  
  <author>
    <name>NamGi YOON</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ANSIBLE NODE 등록 </title>
    <link href="https://skarlsla.github.io/2019/05/08/ANSIBLE-NODE-%EB%93%B1%EB%A1%9D/"/>
    <id>https://skarlsla.github.io/2019/05/08/ANSIBLE-NODE-등록/</id>
    <published>2019-05-08T03:01:26.000Z</published>
    <updated>2019-05-08T03:05:50.302Z</updated>
    
    <content type="html"><![CDATA[<p>Ansible은 모든 target node 작업을 ssh 기반으로 접근하여 처리한다.</p><p>타 시스템으로 접근하여 작업을 하기 위해 ID/PASS 없이 암호화된 키를 전달하여 상호 인증하는 환경을 구성해야 한다.</p><hr><h3 id="1-Ansible-Hosts-파일에-노드-등록"><a href="#1-Ansible-Hosts-파일에-노드-등록" class="headerlink" title="1. Ansible Hosts 파일에 노드 등록"></a>1. Ansible Hosts 파일에 노드 등록</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ansible/hosts</span><br><span class="line"></span><br><span class="line">[webservers]</span><br><span class="line">xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><hr><h3 id="2-SSH-Key-생성"><a href="#2-SSH-Key-생성" class="headerlink" title="2. SSH Key 생성"></a>2. SSH Key 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"nkyoon@xxx.com"</span></span><br><span class="line"><span class="built_in">cd</span> ./.ssh/</span><br><span class="line">cp id_rsa.pub authorized_keys</span><br></pre></td></tr></table></figure><hr><h3 id="3-SSH-Key-NODE로-복사"><a href="#3-SSH-Key-NODE로-복사" class="headerlink" title="3. SSH Key NODE로 복사"></a>3. SSH Key NODE로 복사</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh root@web01 <span class="string">"mkdir ./.ssh;chmod 700 ./.ssh"</span></span><br><span class="line">scp authorized_keys root@01:~/.ssh/authorized_keys </span><br><span class="line"></span><br><span class="line">ansible webservers -m ping  <span class="comment">#테스트</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ansible은 모든 target node 작업을 ssh 기반으로 접근하여 처리한다.&lt;/p&gt;
&lt;p&gt;타 시스템으로 접근하여 작업을 하기 위해 ID/PASS 없이 암호화된 키를 전달하여 상호 인증하는 환경을 구성해야 한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="배포" scheme="https://skarlsla.github.io/tags/%EB%B0%B0%ED%8F%AC/"/>
    
      <category term="cd" scheme="https://skarlsla.github.io/tags/cd/"/>
    
  </entry>
  
  <entry>
    <title>GitLab 연동 및 빌드 테스트</title>
    <link href="https://skarlsla.github.io/2019/05/08/GitLab-%EC%97%B0%EB%8F%99-%EB%B0%8F-%EB%B9%8C%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    <id>https://skarlsla.github.io/2019/05/08/GitLab-연동-및-빌드-테스트/</id>
    <published>2019-05-08T02:43:15.000Z</published>
    <updated>2019-05-08T03:10:08.606Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-소스-코드-관리"><a href="#1-소스-코드-관리" class="headerlink" title="1. 소스 코드 관리"></a>1. 소스 코드 관리</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-16_18-2-36.png" alt="Alt text"></p><hr><h3 id="2-URL-연결시-ssl-이슈"><a href="#2-URL-연결시-ssl-이슈" class="headerlink" title="2. URL 연결시  ssl 이슈"></a>2. URL 연결시  ssl 이슈</h3><p>jenkins 관리 - 시스템설정 - 환경변수 추가</p><p>GIT_SSL_NO_VERIFY , true</p><hr><h3 id="3-빌드유발-웹훅-주소-획득"><a href="#3-빌드유발-웹훅-주소-획득" class="headerlink" title="3. 빌드유발 - 웹훅 주소 획득"></a>3. 빌드유발 - 웹훅 주소 획득</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/jenkins_build.png" alt="Alt text"></p><hr><h3 id="4-gitlab-프로젝트-설정-integrations"><a href="#4-gitlab-프로젝트-설정-integrations" class="headerlink" title="4. gitlab - 프로젝트 - 설정- integrations"></a>4. gitlab - 프로젝트 - 설정- integrations</h3><p>웹훅 url 입력 <a href="http://jenkins.xxx.com:9090/project/gitlab-devops-test" target="_blank" rel="noopener">http://jenkins.xxx.com:9090/project/gitlab-devops-test</a></p><p>푸쉬 이벤트시 빌드 유발</p><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-16_18-6-29.png" alt="Alt text"></p><hr><h3 id="5-웹훅-처리를-위한-아웃바운드-허용-ADMIN-설정"><a href="#5-웹훅-처리를-위한-아웃바운드-허용-ADMIN-설정" class="headerlink" title="5. 웹훅 처리를 위한 아웃바운드 허용 -  ADMIN- 설정"></a>5. 웹훅 처리를 위한 아웃바운드 허용 -  ADMIN- 설정</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-16_18-9-50.png" alt="Alt text"></p><hr><h3 id="6-빌드-시-작업-테스트"><a href="#6-빌드-시-작업-테스트" class="headerlink" title="6.  빌드 시 작업 테스트"></a>6.  빌드 시 작업 테스트</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-16_18-8-40.png" alt="Alt text"></p><hr><h3 id="7-푸쉬-이벤트-발생시-젠킨스-빌드"><a href="#7-푸쉬-이벤트-발생시-젠킨스-빌드" class="headerlink" title="7. 푸쉬 이벤트 발생시  젠킨스 빌드"></a>7. 푸쉬 이벤트 발생시  젠킨스 빌드</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-16_18-7-37.png" alt="Alt text"></p><p>참고: <a href="http://egloos.zum.com/mcchae/v/11246199" target="_blank" rel="noopener">http://egloos.zum.com/mcchae/v/11246199</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-소스-코드-관리&quot;&gt;&lt;a href=&quot;#1-소스-코드-관리&quot; class=&quot;headerlink&quot; title=&quot;1. 소스 코드 관리&quot;&gt;&lt;/a&gt;1. 소스 코드 관리&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubuse
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="jenkins" scheme="https://skarlsla.github.io/tags/jenkins/"/>
    
      <category term="gitlab" scheme="https://skarlsla.github.io/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>ANSIBLE 설치 및 설정</title>
    <link href="https://skarlsla.github.io/2019/04/29/ANSIBLE-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95/"/>
    <id>https://skarlsla.github.io/2019/04/29/ANSIBLE-설치-및-설정/</id>
    <published>2019-04-29T08:23:56.000Z</published>
    <updated>2019-04-29T08:26:04.110Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-ANSIBLE-설치"><a href="#1-ANSIBLE-설치" class="headerlink" title="1. ANSIBLE 설치"></a>1. ANSIBLE 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">yum -y install ansible</span><br></pre></td></tr></table></figure><hr><h3 id="2-ANSIBLE-타워설치"><a href="#2-ANSIBLE-타워설치" class="headerlink" title="2. ANSIBLE 타워설치"></a>2. ANSIBLE 타워설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz</span><br><span class="line">tar xvfz ansible-tower-setup-latest.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ansible-tower-setup-3.4.3-1/</span><br><span class="line">vi inventory   <span class="comment">#설정파일</span></span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><hr><h3 id="3-접속확인"><a href="#3-접속확인" class="headerlink" title="3. 접속확인"></a>3. 접속확인</h3><p>https://[serverIP]:80<br>admin / password(inventory에서 설정한 pw)</p><hr><h3 id="4-비밀번호-변경"><a href="#4-비밀번호-변경" class="headerlink" title="4. 비밀번호 변경"></a>4. 비밀번호 변경</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@tcid]<span class="comment"># tower-manage  changepassword admin</span></span><br><span class="line"></span><br><span class="line">Changing password <span class="keyword">for</span> user <span class="string">'admin'</span></span><br><span class="line">Password:</span><br><span class="line">Password (again):</span><br><span class="line">Password changed successfully <span class="keyword">for</span> user <span class="string">'admin'</span></span><br><span class="line">You have new mail <span class="keyword">in</span> /var/spool/mail/root</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-ANSIBLE-설치&quot;&gt;&lt;a href=&quot;#1-ANSIBLE-설치&quot; class=&quot;headerlink&quot; title=&quot;1. ANSIBLE 설치&quot;&gt;&lt;/a&gt;1. ANSIBLE 설치&lt;/h3&gt;&lt;figure class=&quot;highlight b
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="배포" scheme="https://skarlsla.github.io/tags/%EB%B0%B0%ED%8F%AC/"/>
    
      <category term="cd" scheme="https://skarlsla.github.io/tags/cd/"/>
    
  </entry>
  
  <entry>
    <title>젠킨스 설치 및 설정</title>
    <link href="https://skarlsla.github.io/2019/04/29/%EC%A0%A0%ED%82%A8%EC%8A%A4-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95/"/>
    <id>https://skarlsla.github.io/2019/04/29/젠킨스-설치-및-설정/</id>
    <published>2019-04-29T08:21:03.000Z</published>
    <updated>2019-04-29T08:23:31.575Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-자바설치"><a href="#1-자바설치" class="headerlink" title="1. 자바설치"></a>1. 자바설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum list java*jdk-devel</span><br><span class="line">yum install java-1.8.0-openjdk-devel.x86_64</span><br><span class="line">java -version</span><br><span class="line"><span class="built_in">which</span> javac</span><br><span class="line">readlink -f /usr/bin/javac</span><br><span class="line"></span><br><span class="line">/etc/profile 맨밑줄 추가</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.201.b09-2.el7_6.x86_64/bin/javac</span><br></pre></td></tr></table></figure><hr><h3 id="2-젠킨스-설치"><a href="#2-젠킨스-설치" class="headerlink" title="2. 젠킨스 설치"></a>2. 젠킨스 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo</span><br><span class="line">rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br><span class="line">yum install jenkins</span><br><span class="line"></span><br><span class="line">vi /etc/sysconfig/jenkins 포트변경 9090</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-자바설치&quot;&gt;&lt;a href=&quot;#1-자바설치&quot; class=&quot;headerlink&quot; title=&quot;1. 자바설치&quot;&gt;&lt;/a&gt;1. 자바설치&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="ci" scheme="https://skarlsla.github.io/tags/ci/"/>
    
      <category term="jenkins" scheme="https://skarlsla.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>reply-to 옵션에 대한 분석</title>
    <link href="https://skarlsla.github.io/2019/04/29/reply-to-%EC%98%B5%EC%85%98%EC%97%90-%EB%8C%80%ED%95%9C-%EB%B6%84%EC%84%9D/"/>
    <id>https://skarlsla.github.io/2019/04/29/reply-to-옵션에-대한-분석/</id>
    <published>2019-04-29T08:18:30.000Z</published>
    <updated>2019-04-29T08:20:00.389Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-rabbitmq-amqp프로토콜-에서-지원하는-reply-to"><a href="#1-rabbitmq-amqp프로토콜-에서-지원하는-reply-to" class="headerlink" title="1. rabbitmq(amqp프로토콜) 에서 지원하는 reply-to"></a>1. rabbitmq(amqp프로토콜) 에서 지원하는 reply-to</h3><p><a href="http://www.rabbitmq.com/direct-reply-to.html" target="_blank" rel="noopener">http://www.rabbitmq.com/direct-reply-to.html</a></p><p>링크 발췌내용 중 사용법</p><p>Use<br>To use direct reply-to, an RPC client should:</p><p>Consume from the pseudo-queue amq.rabbitmq.reply-to in no-ack mode. There is no need to declare this “queue” first, although the client can do so if it wants.<br>Set the reply-to property in their request message to amq.rabbitmq.reply-to.<br>The RPC server will then see a reply-to property with a generated name. It should publish to the default exchange (“”) with the routing key set to this value (i.e. just as if it were sending to a reply queue as usual). The message will then be sent straight to the client consumer.</p><p>If the RPC server is going to perform some expensive computation it might wish to check if the client has gone away. To do this the server can declare the generated reply name first on a disposable channel in order to determine whether it still exists. Note that even if you declare the “queue” with passive=false there is no way to create it; the declare will just succeed (with 0 messages ready and 1 consumer) or fail.</p><p>결론적으로  클라이언트에서 consume(대기큐)를 할때  옵션으로 reply-to = amq.rabbitmq.reply-to 넣고  no-ack 모드로 실행한다.<br>그러면 따로 큐를 생성해 놓지 않더라도 amq.rabbitmq.reply-to 라는 큐가 생성되고  서버에서는 reply-to property를 통해  클라이언트에게 리턴한다. </p><p>서버에서 특이점은 publish 할때 따로 exchange name 을 적지 않고 routingkey 자리에 reply-to에서 온 값을 넣으면된다.<br>서버에서 reply-to 리턴하는 queue를 찍어보면 amq.rabbitmq.reply-to.g2dkAA1yYWJiaXRAdHdlYjAyAAAvugAAAAMB.N2mDRUJksXuxZHf1leTCKg==<br>이런식으로 뒤에 임의의 값이 붙어서 나온다.  여러 서버를 띄어도 저 값은 변하지 않았다.  rabbitmq 서버에서 관리하는 것으로 보인다.     </p><hr><h3 id="2-reply-to를-사용하지-않으면"><a href="#2-reply-to를-사용하지-않으면" class="headerlink" title="2.  reply-to를 사용하지 않으면"></a>2.  reply-to를 사용하지 않으면</h3><p>reply-to 옵션을 쓰지않고 지정된 큐로 작업이 가능하다.<br>ack모드를 사용할수있어 데이터 유지하는 옵션을 사용할수있다.<br>하지만 옵션을 사용시 rabbitmq에서 제공하는 큐생성 및 사용시 추가적인 작업이 필요해 보인다.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-rabbitmq-amqp프로토콜-에서-지원하는-reply-to&quot;&gt;&lt;a href=&quot;#1-rabbitmq-amqp프로토콜-에서-지원하는-reply-to&quot; class=&quot;headerlink&quot; title=&quot;1. rabbitmq(amq
      
    
    </summary>
    
      <category term="RabbitMq" scheme="https://skarlsla.github.io/categories/RabbitMq/"/>
    
    
      <category term="reply-to" scheme="https://skarlsla.github.io/tags/reply-to/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ가 재기동 됐을때 대응책</title>
    <link href="https://skarlsla.github.io/2019/04/29/RabbitMQ%EA%B0%80-%EC%9E%AC%EA%B8%B0%EB%8F%99-%EB%90%90%EC%9D%84%EB%95%8C-%EB%8C%80%EC%9D%91%EC%B1%85/"/>
    <id>https://skarlsla.github.io/2019/04/29/RabbitMQ가-재기동-됐을때-대응책/</id>
    <published>2019-04-29T08:14:56.000Z</published>
    <updated>2019-04-29T08:16:51.048Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="RabbitMQ가-재기동-됐을때-대응책"><a href="#RabbitMQ가-재기동-됐을때-대응책" class="headerlink" title="RabbitMQ가 재기동 됐을때 대응책"></a>RabbitMQ가 재기동 됐을때 대응책</h3><p>메시지를 Queue에 넣은 뒤 Consumer에게 전달하기 전에 RabittMQ 서버가 죽는다면 기본적으로 해당 메시지는 날라가버리게 된다. 이런 상황을 방지 하기 위해 durable이라는 개념을 가지고 있다.</p><p>Message durability<br>메시지는 Queue에 보관할 때 file에도 같이 쓰도록 만드는 방법이다.<br>아래와 같은 방법으로 설정해야 동작한다.</p><p>queue생성시 durable속성을 true로 주고 만든다.<br>message publish할때 MessageProperties.PERSISTENT_TEXT_PLAIN을 설정함<br>1,2번 모두 만족해야 메시지가 Queue에 남아있을 때 restart해도 날라가지 않는다.</p><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/q_durable.png" alt="rpc"></p><p>※ 메시지의 persistent는 완변히 보장되진 않음. 메번 메시지마다 fsync 로 동기화히지 않기 때문에 짧은시간이나마 아직 Disk에 쓰여지지 않았을 경우가 있다. 좀더 강력한 방법을 보장하기 위해서는 publisher confirms를 사용</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;RabbitMQ가-재기동-됐을때-대응책&quot;&gt;&lt;a href=&quot;#RabbitMQ가-재기동-됐을때-대응책&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ가 재기동 됐을때 대응책&quot;&gt;&lt;/a&gt;RabbitMQ가 재기동 됐을때 
      
    
    </summary>
    
      <category term="RabbitMq" scheme="https://skarlsla.github.io/categories/RabbitMq/"/>
    
    
  </entry>
  
  <entry>
    <title>RPC</title>
    <link href="https://skarlsla.github.io/2019/04/29/RPC/"/>
    <id>https://skarlsla.github.io/2019/04/29/RPC/</id>
    <published>2019-04-29T08:13:45.000Z</published>
    <updated>2019-04-29T08:14:44.160Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="원격-프로시져-호출-RPC"><a href="#원격-프로시져-호출-RPC" class="headerlink" title="원격 프로시져 호출 (RPC)"></a>원격 프로시져 호출 (RPC)</h3><p>RabbitMQ는 Request-Response로 Client와 Server를 이어주기 위해 RPC라는 개념으로 기능을 제공한다.</p><p>RPC라는 거창한 이름을 사용하였지만 실제로는 Client의 request를 Server에 전달하고 , Server가 처리한 결과를 알맞은 Client 요청에 대한 응답으로 전달 할 수 있는 방법을 말한다.</p><p>Message Properties 설명<br>DeliveryMode : persistent인지 transient인지 표시 (휘발성인지 비휘발성인지 구분자)</p><p>ContentType : 내용물의 mime-type</p><p>ReplyTo : Callback Queue의 이름</p><p>CorrelationID : 요청을 구분할 수 있는 유일값</p><p>처리 흐름<br>Client가 CorrelationID, ReplyTo 주어서 RabbitMQ의 특정 Request보관용 Queue에 데이터를 Push한다.</p><p>Request용 Queue에 데이터를 Server에서 Consume하여 요청을 처리한다.</p><p>요청처리 후 Request에서 받은 CorrelationID 와 ReplyTo를 추출하여, 요청ID를 속성으로 갖는 Response를 ReplyToQueue에 Push한다.</p><p>Client는 ReplyTo Queue를 subscribe하고 있다가 Response가 오면 CorrelationID를 보고 어떤 요청에 대한 응답인지를 구분하여 처리한다.</p><hr><h3 id="RPC의-이점"><a href="#RPC의-이점" class="headerlink" title="RPC의 이점"></a>RPC의 이점</h3><p>RPC 구조를 응용하면 아래와 같은 상황에 이점을 얻을 수 있다.</p><p>서버처리 이점<br>서버 처리속도가 느려서 성능을 증가 시키려고 할 때, RPC 서버를 하나 더 두고 같은 Request Queue를 바라보게 하면 됨 ( Round Robin 하므로 )</p><p>Client 이점<br>하나의 메시지를 개별 Round Trip으로 처리를 위해 queueDeclare같은 동기처리 요청이 필요없다. (임시 Queue를 생성하여 Client마다 다른 Queue를 사용하므로)</p><p>RPC 구성시 고려할 점<br>돌아가는 서버가 없을 때 Client 처리<br>요청 Timeout시 Client 처리<br>서버 Exception이나 오동작시 Client에게 이를 어떻게 전달할지<br>Invalid한 데이터가 서버로 전달 되었을 때의 처리</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;원격-프로시져-호출-RPC&quot;&gt;&lt;a href=&quot;#원격-프로시져-호출-RPC&quot; class=&quot;headerlink&quot; title=&quot;원격 프로시져 호출 (RPC)&quot;&gt;&lt;/a&gt;원격 프로시져 호출 (RPC)&lt;/h3&gt;&lt;p&gt;RabbitMQ는 Req
      
    
    </summary>
    
      <category term="RabbitMq" scheme="https://skarlsla.github.io/categories/RabbitMq/"/>
    
    
      <category term="rpc" scheme="https://skarlsla.github.io/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>Persistent, Durable, Ack</title>
    <link href="https://skarlsla.github.io/2019/04/29/Persistent-Durable-Ack/"/>
    <id>https://skarlsla.github.io/2019/04/29/Persistent-Durable-Ack/</id>
    <published>2019-04-29T08:09:10.000Z</published>
    <updated>2019-04-29T08:13:18.936Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-메시지-수신-자동-확인-ack-noAck"><a href="#1-메시지-수신-자동-확인-ack-noAck" class="headerlink" title="1. 메시지 수신 자동 확인(ack , noAck)"></a>1. 메시지 수신 자동 확인(ack , noAck)</h3><p>작업을 수행하는 데 몇 초가 걸릴 수 있습니다. </p><p>소비자 중 한 명이 긴 작업을 시작하고 부분적으로 만 수행되어 사망하는 경우 어떻게되는지 궁금 할 수 있습니다. </p><p>현재의 코드(</p><p>noAck : true<br>)를 사용하면 RabbitMQ가 고객에게 메시지를 전달하면 바로 삭제 표시가됩니다. </p><p>이 경우 작업자를 죽이면 처리중인 메시지가 손실됩니다. </p><p>이 특정 작업자에게 발송되었지만 아직 처리되지 않은 모든 메시지도 손실됩니다.</p><p>noAck : false<br>ack를 전송하지 않고 소비자가 죽거나 (채널이 닫히거나 연결이 끊어 지거나 TCP 연결이 끊어지는 경우),</p><p>RabbitMQ는 메시지가 완전히 처리되지 않았 음을 인식하고 다시 대기합니다.</p><p>가끔씩 사망하더라도 메시지를 잃어 버리지 않을 것입니다.</p><p>메시지 시간 초과가 없습니다. RabbitMQ는 소비자가 사망 할 때 메시지를 재전송합니다. </p><p>메시지 처리가 매우 오랜 시간이 걸리는 경우에도 괜찮습니다.</p><p>앞의 예에서 메시지 수신 확인이 해제되었습니다. 작업을 마친 후 에는  noAck : false    </p><p>옵션 을 사용하여 설정을 해제하고 작업자에게 적절한 응답을 보내야합니다.</p><p>ex) 자동 응답</p><p>ch.consume(q, function(msg) {<br>  var secs = msg.content.toString().split(‘.’).length - 1;</p><p>  console.log(“ [x] Received %s”, msg.content.toString());<br>  setTimeout(function() {<br>    console.log(“ [x] Done”);<br>  }, secs * 1000);<br>}, {noAck: true});</p><p>ex) 자동 미응답 &amp; ack(msg)</p><p>ch.consume(q, function(msg) {<br>  var secs = msg.content.toString().split(‘.’).length - 1;</p><p>  console.log(“ [x] Received %s”, msg.content.toString());<br>  setTimeout(function() {<br>    console.log(“ [x] Done”);<br>    ch.ack(msg);<br>  }, secs * 1000);<br>}, {noAck: false});</p><hr><h3 id="2-메시지-내구성-durable-지속성-persistent"><a href="#2-메시지-내구성-durable-지속성-persistent" class="headerlink" title="2.  메시지 내구성(durable) , 지속성(persistent)"></a>2.  메시지 내구성(durable) , 지속성(persistent)</h3><p>우리는 소비자가 사망하더라도 작업이 손실되지 않도록하는 방법을 배웠습니다.  그러나 RabbitMQ 서버가 중지되면 우리의 작업은 여전히 손실됩니다.</p><p>RabbitMQ가 종료되거나 충돌하면 사용자가 알리지 않는 한 대기열과 메시지를 잊어 버리게됩니다. 메시지가 손실되지 않도록하려면 큐와 메시지를 모두 튼튼하게 표시해야합니다.</p><p>첫째, 우리는 RabbitMQ가 결코 우리 큐를 잃지 않도록해야합니다. 그렇게하기 위해서 우리는 그것을 durable 으로 선언 할 필요가있다 .</p><p>ex) </p><p>큐 할당시 </p><p>ch.assertQueue ( ‘hello’ , { durable : true });<br>큐로 전송시 옵션</p><p>ch.sendToQueue(q, new Buffer(msg), {persistent: true});</p><hr><h3 id="3-최종적으로-구현해야-할-옵션을-포함한-소스"><a href="#3-최종적으로-구현해야-할-옵션을-포함한-소스" class="headerlink" title="3.  최종적으로  구현해야 할 옵션을 포함한  소스"></a>3.  최종적으로  구현해야 할 옵션을 포함한  소스</h3><p>new_task.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">var</span> amqp = <span class="built_in">require</span>(<span class="string">'amqplib/callback_api'</span>);</span><br><span class="line">amqp.connect(<span class="string">'amqp://localhost'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, conn</span>) </span>&#123;</span><br><span class="line">  conn.createChannel(<span class="function"><span class="keyword">function</span>(<span class="params">err, ch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> q = <span class="string">'task_queue'</span>;</span><br><span class="line">    <span class="keyword">var</span> msg = process.argv.slice(<span class="number">2</span>).join(<span class="string">' '</span>) || <span class="string">"Hello World!"</span>;</span><br><span class="line"></span><br><span class="line">    ch.assertQueue(q, &#123;<span class="attr">durable</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    ch.sendToQueue(q, <span class="keyword">new</span> Buffer(msg), &#123;<span class="attr">persistent</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">" [x] Sent '%s'"</span>, msg);</span><br><span class="line">  &#125;);</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; conn.close(); process.exit(<span class="number">0</span>) &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>worker.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">var</span> amqp = <span class="built_in">require</span>(<span class="string">'amqplib/callback_api'</span>);</span><br><span class="line">amqp.connect(<span class="string">'amqp://localhost'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, conn</span>) </span>&#123;</span><br><span class="line">  conn.createChannel(<span class="function"><span class="keyword">function</span>(<span class="params">err, ch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> q = <span class="string">'task_queue'</span>;</span><br><span class="line"></span><br><span class="line">    ch.assertQueue(q, &#123;<span class="attr">durable</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    ch.prefetch(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">" [*] Waiting for messages in %s. To exit press CTRL+C"</span>, q);</span><br><span class="line">    ch.consume(q, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> secs = msg.content.toString().split(<span class="string">'.'</span>).length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">" [x] Received %s"</span>, msg.content.toString());</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">" [x] Done"</span>);</span><br><span class="line">        ch.ack(msg);</span><br><span class="line">      &#125;, secs * <span class="number">1000</span>);</span><br><span class="line">    &#125;, &#123;<span class="attr">noAck</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-메시지-수신-자동-확인-ack-noAck&quot;&gt;&lt;a href=&quot;#1-메시지-수신-자동-확인-ack-noAck&quot; class=&quot;headerlink&quot; title=&quot;1. 메시지 수신 자동 확인(ack , noAck)&quot;&gt;&lt;/a&gt;1. 메시
      
    
    </summary>
    
      <category term="RabbitMq" scheme="https://skarlsla.github.io/categories/RabbitMq/"/>
    
    
      <category term="rabbitmq" scheme="https://skarlsla.github.io/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RPC 패턴과 pub/sub패턴에서의 ack 사용차이</title>
    <link href="https://skarlsla.github.io/2019/04/29/RPC-%ED%8C%A8%ED%84%B4%EA%B3%BC-pub-sub%ED%8C%A8%ED%84%B4%EC%97%90%EC%84%9C%EC%9D%98-ack-%EC%82%AC%EC%9A%A9%EC%B0%A8%EC%9D%B4/"/>
    <id>https://skarlsla.github.io/2019/04/29/RPC-패턴과-pub-sub패턴에서의-ack-사용차이/</id>
    <published>2019-04-29T08:03:40.000Z</published>
    <updated>2019-04-29T08:07:24.944Z</updated>
    
    <content type="html"><![CDATA[<p>기본적으로  noAck, durable 옵션으로 큐에서의 삭제와 ack의 사용을 조정할수있다.</p><hr><h3 id="1-Publish-Subscribe"><a href="#1-Publish-Subscribe" class="headerlink" title="1.   Publish/Subscribe"></a>1.   Publish/Subscribe</h3><p>로그를 쌓는 서비스를 예를 들어보면</p><p>보내는(pub)서버와 처리하는(subs)서버가 있겠다.</p><p>pub에서 메세지를 보내고 큐에 쌓인다.  subs 서버는 이를 하나씩 꺼내어 처리한다.</p><p>큐에 보낸 메세지를 잃어 버리지 않기 위해서는 durable 옵션으로 큐를 생성하고  </p><p>큐에 전송시 persistent 옵션을 주면된다. </p><p>그러면 rabbitmq가 죽더라고 큐에 들어간 내용들은 재기동시 다시 살아난다.</p><p>하지만 subs서버가 큐에서 꺼낸 메세지를 작업중 죽는다면 메세지는 소실된다.</p><p>이를 위해 consume함수 옵션(noAck)을 사용한다. 기본적으로 noAck를 하면 자동으로 ack가 실행되고</p><p>큐에서 사라진다. 하지만 noAck 옵션을 false로 선언하면 subs서버에서 작업을 처리한후 ack를 보내야한다.</p><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/ack_client_pub_sub.png" alt="pub/sub"></p><hr><h3 id="2-RPC-req-res"><a href="#2-RPC-req-res" class="headerlink" title="2.   RPC(req/res)"></a>2.   RPC(req/res)</h3><p>The RPC client must consume in no-ack mode. </p><p>This is because there is no queue for the reply message to be returned to</p><p>if the client disconnects or rejects the reply message.</p><p>RPC 클라이언트는 반드시 consume을 사용할 때 no-ack 모드를 사용해야한다.</p><p>클라이언트에서 연결이 끊기거나 reject 에러가 나면 서버에서 전달할 방법이 없기 때문이다.</p><p>reply queue는 요청시 생성되고 결과받고 사라지는 임시큐이다.</p><p>메세지가 유실되면 안되는 서비스의 처리는 별도로 처리하는 것이 맞겠다.</p><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/ack_client_rpc.png" alt="rpc"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;기본적으로  noAck, durable 옵션으로 큐에서의 삭제와 ack의 사용을 조정할수있다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-Publish-Subscribe&quot;&gt;&lt;a href=&quot;#1-Publish-Subscribe&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="RabbitMq" scheme="https://skarlsla.github.io/categories/RabbitMq/"/>
    
    
      <category term="rpc" scheme="https://skarlsla.github.io/tags/rpc/"/>
    
      <category term="ack" scheme="https://skarlsla.github.io/tags/ack/"/>
    
  </entry>
  
  <entry>
    <title>DEVOPS란...</title>
    <link href="https://skarlsla.github.io/2019/04/29/DEVOPS/"/>
    <id>https://skarlsla.github.io/2019/04/29/DEVOPS/</id>
    <published>2019-04-29T05:50:24.000Z</published>
    <updated>2019-04-29T06:31:29.884Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps?"></a>DevOps?</h3><p>개발자와 운영자간에 충돌을 해결하기 위한 방법론<br>개발과 운영 간의 프로세스와 도구에 대한 접근을 공유하여 그 차이를 줄이는데 목적을 둔다.<br>개발자와 운영자의 업무뿐만 아니라 QA업무(TEST)에도 포함</p><p>Devops란, “엔지니어가, 프로그래밍하고, 빌드하고, 직접 시스템에 배포 및 서비스를 RUN한다. 그리고, 사용자와 끊임 없이 Interaction하면서 서비스를 개선해 나가는 일련의 과정이자 문화이다.”</p><hr><h3 id="DevOps-작동-방식"><a href="#DevOps-작동-방식" class="headerlink" title="DevOps 작동 방식"></a>DevOps 작동 방식</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/devops_cycle.png" alt="작동 싸이클"></p><p>기존 개발팀은 기획팀이 요구사항을 개발팀에 던지고, 개발팀은 개발 내용을 운영에 던지는, waterfall 모델 처럼, 각 팀이 개발 단계별로 자기 역할을 한 후에, 다음 단계로 던지고 잊어 버리는 (fire &amp; forget)  형태라면, Devops 형태의 개발팀은, 던지는 것이 아니라 과정 내내 같이 수행한다. 요구 사항을 개발팀에 넘겨도, 개발팀과 계속 협의를 하면서 요구 사항을 구체화 하고, 개선하며, 개발중에 운영인원과 같이 협의 하면서 최적의 구조를 논의 하면서 개발이 진행된다.</p><hr><h3 id="CI-지속적-통합"><a href="#CI-지속적-통합" class="headerlink" title="CI(지속적 통합)"></a>CI(지속적 통합)</h3><p>지속적 통합은 자동화된 빌드 및 테스트가 수행된 후, 개발자가 코드 변경 사항을 중앙 리포지토리에 정기적으로 병합하는 소프트웨어 개발 방식입니다. 지속적 통합의 핵심 목표는 버그를 신속하게 찾아 해결하고, 소프트웨어 품질을 개선하고, 새로운 소프트웨어 업데이트를 검증 및 릴리스하는 데 걸리는 시간을 단축하는 것입니다.</p><p>필수요소  = CI 서버(젠킨스) + SCM(GIT) + 빌드툴 + 테스트툴(JUnit, Mocha)</p><hr><h3 id="CD-지속적-전달"><a href="#CD-지속적-전달" class="headerlink" title="CD(지속적 전달)"></a>CD(지속적 전달)</h3><p>지속적 전달은 코드 변경이 프로덕션에 릴리스할 수 있도록 자동으로 빌드, 테스트 및 준비되는 소프트웨어 개발 방식입니다. 빌드 단계 이후의 모든 코드 변경 사항을 테스트 환경 및/또는 프로덕션 환경에 배포함으로써 지속적 통합을 확장합니다. 지속적 전달이 적절하게 구현되면, 개발자는 언제나 즉시 배포할 수 있고 표준화된 테스트 프로세스를 통과한 빌드 아티팩트를 보유하게 됩니다.</p><p>배포툴(ANSIBLE and ANSIBLE Tower)</p><hr><h3 id="CI-CD의-차이점"><a href="#CI-CD의-차이점" class="headerlink" title="CI/CD의 차이점"></a>CI/CD의 차이점</h3><p>빌드 서버로 코드를 푸쉬 한 후 자동으로 빌드가 시작 되는 지점까지는 CI라 하며, 거기서 테스트를 거쳐 디플로이 과정까지 자동화가 되어있으면 CD라 한다 CD에서 또한 Deploy를 자동으로 해주냐, 수동으로 해주냐에 따라 Delivery, Deployment로 나뉘어집니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;DevOps&quot;&gt;&lt;a href=&quot;#DevOps&quot; class=&quot;headerlink&quot; title=&quot;DevOps?&quot;&gt;&lt;/a&gt;DevOps?&lt;/h3&gt;&lt;p&gt;개발자와 운영자간에 충돌을 해결하기 위한 방법론&lt;br&gt;개발과 운영 간의 프로세스와 도
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="cd" scheme="https://skarlsla.github.io/tags/cd/"/>
    
      <category term="devops" scheme="https://skarlsla.github.io/tags/devops/"/>
    
      <category term="ci" scheme="https://skarlsla.github.io/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>HPA(오토스케일링) 활용법</title>
    <link href="https://skarlsla.github.io/2018/08/14/kubernetest_hpa/"/>
    <id>https://skarlsla.github.io/2018/08/14/kubernetest_hpa/</id>
    <published>2018-08-14T04:14:35.000Z</published>
    <updated>2018-10-18T02:29:03.664Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-개요"><a href="#1-개요" class="headerlink" title="1. 개요"></a>1. 개요</h3><ul><li>애플리케이션을 자동으로 Scale-out 할수 있는 Horizontal Pod Autoscaler 기능</li></ul><p>CPU 자원설정에 따라 자동으로 pod의 숫자를 scale-up 한다.</p><hr><h3 id="2-deployment-작성"><a href="#2-deployment-작성" class="headerlink" title="2. deployment 작성"></a>2. deployment 작성</h3><ul><li>back-end-rolling-deployment.yaml<pre><code class="bash">apiVersion: apps/v1beta2kind: Deploymentmetadata:name: rolling-update-testlabels:  app: web-front-endspec:replicas: 1minReadySeconds: 10strategy:  <span class="built_in">type</span>: RollingUpdate  rollingUpdate:    maxUnavailable: 50%selector:  matchLabels:    app: web-front-endtemplate:  metadata:    labels:      app: web-front-end      department: group3  spec:    containers:    - name: m-client-rolling      image: skarl/client:latest      env:      - name: PORT_ARGS        value: <span class="string">"--port=80"</span>      ports:      - containerPort: 80        name: web-port        protocol: TCP      resources:        requests:          memory: <span class="string">"256Mi"</span>          cpu: <span class="string">"200m"</span>        limits:          memory: <span class="string">"1Gi"</span>          cpu: <span class="string">"500m"</span></code></pre></li></ul><hr><p>Resources Requests 사용량 설정 필수<br>resources.requests.cpu 부분에 CPU 자원을 200m(milli-cores) 또는 0.2로 요청</p><hr><h3 id="2-hpa-작성"><a href="#2-hpa-작성" class="headerlink" title="2. hpa 작성"></a>2. hpa 작성</h3><ul><li>hpa-deployment.yaml</li></ul><pre><code class="bash">apiVersion: autoscaling/v1kind: HorizontalPodAutoscalermetadata:  name: rolling-update-hpaspec:  scaleTargetRef:    apiVersion: apps/v1beta2    kind: Deployment    name: rolling-update-test  maxReplicas: 10  minReplicas: 1  targetCPUUtilizationPercentage: 10</code></pre><p>scaleTargetRef: 대상설정<br>minReplicas: 최소pod<br>maxReplicas: 최대pod<br>targetCPUUtilizationPercentage: CPU 사용 임계치 %로설정 넘어서면 업스케일 동작</p><h3 id="3-모니터링-및-테스트"><a href="#3-모니터링-및-테스트" class="headerlink" title="3. 모니터링 및 테스트"></a>3. 모니터링 및 테스트</h3><ul><li>부하테스트를 통해 cpu 사용량 늘리고</li></ul><p>while true; do wget q -O <a href="https://rolling.test.com:30100/coin/list" target="_blank" rel="noopener">https://rolling.test.com:30100/coin/list</a>; done</p><ul><li>명령어로 모니터링 kubectl get hpa -w</li></ul><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/hpa-w.PNG" alt="Alt text"></p><ul><li>대쉬보드에서 확장된 pods 확인</li></ul><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/hpa-pods-incre.PNG" alt="Alt text"></p><hr><h3 id="4-사용중-CPU-gt-UNKnown-일때-해결방법"><a href="#4-사용중-CPU-gt-UNKnown-일때-해결방법" class="headerlink" title="4. 사용중 CPU -&gt; UNKnown 일때 해결방법"></a>4. 사용중 CPU -&gt; UNKnown 일때 해결방법</h3><ul><li>메트릭 api 존재유무 확인</li></ul><pre><code class="bash">kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes</code></pre><ul><li>메트릭 서버 설치</li></ul><p>git clone <a href="https://github.com/kubernetes-incubator/metrics-server.git" target="_blank" rel="noopener">https://github.com/kubernetes-incubator/metrics-server.git</a><br>cd metrics-server/<br>kubectl create -f deploy/1.8+/</p><ul><li>설치 후 확인</li></ul><p>[root@tweb01 ~] kubectl get –raw “/apis/metrics.k8s.io/v1beta1/nodes” {“kind”:”NodeMetricsList”,”apiVersion”:”metrics.k8s.io/v1beta1”,”metadata”:{“selfLink”:”/apis/metrics.k8s.io/v1beta1/nodes”},”items”:[{“metadata”:{“name”:”tweb01.freebex.com”,”selfLink”:”/apis/metrics.k8s.io/v1beta1/nodes/tweb01.freebex.com”,”creationTimestamp”:”2018-06-28T07:27:00Z”},”timestamp”:”2018-06-28T07:26:00Z”,”window”:”1m0s”,”usage”:{“cpu”:”116m”,”memory”:”2454816Ki”}},{“metadata”:{“name”:”tweb02.freebex.com”,”selfLink”:”/apis/metrics.k8s.io/v1beta1/nodes/tweb02.freebex.com”,”creationTimestamp”:”2018-06-28T07:27:00Z”},”timestamp”:”2018-06-28T07:26:00Z”,”window”:”1m0s”,”usage”:{“cpu”:”76m”,”memory”:”1818256Ki”}}]}</p><ul><li>kubernetes 설정파일 수정</li></ul><p>vi /etc/kubernetes/manifests/kube-controller-manager.yaml</p><p>controller-manager 옵션에 추가</p><ul><li>–horizontal-pod-autoscaler-use-rest-clients=true</li></ul><p>그래도 unknown이 나오면 재실행 해보고 부하를 줘보고 기다려보면 나온다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-개요&quot;&gt;&lt;a href=&quot;#1-개요&quot; class=&quot;headerlink&quot; title=&quot;1. 개요&quot;&gt;&lt;/a&gt;1. 개요&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;애플리케이션을 자동으로 Scale-out 할수 있는 Horizontal Pod Autos
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://skarlsla.github.io/categories/Kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://skarlsla.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>무중단배포 rolling update strategy</title>
    <link href="https://skarlsla.github.io/2018/08/04/kubernetest_rolling/"/>
    <id>https://skarlsla.github.io/2018/08/04/kubernetest_rolling/</id>
    <published>2018-08-04T08:54:33.000Z</published>
    <updated>2018-10-18T02:29:03.663Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-개요"><a href="#1-개요" class="headerlink" title="1. 개요"></a>1. 개요</h3><p>서비스 중단 없이 애플리케이션을 업데이트 하기 위해서, Kubernetes에서는 rolling update라는 기능을 지원합니다. 이 기능을 통해서 전체 Pod을 일시에 중단/업데이트 하는 것이 아니라, 한번에 n개씩 Pod을 순차적으로 업데이트할 수 있습니다. 이를 통해 서비스 중단 현상 없이 애플리케이션 버전 업데이트 및 롤백을 할 수 있습니다.</p><hr><h3 id="2-deployment-작성"><a href="#2-deployment-작성" class="headerlink" title="2. deployment 작성"></a>2. deployment 작성</h3><ul><li>back-end-rolling-deployment.yaml<pre><code class="bash">apiVersion: apps/v1beta1kind: Deploymentmetadata:name: rolling-update-testspec:replicas: 3minReadySeconds: 10strategy:  <span class="built_in">type</span>: RollingUpdate  rollingUpdate:    maxSurge: 1    maxUnavailable: 0template:  metadata:    labels:      app: web-front-end      department: group3  spec:    containers:    - name: m-client-web      image: skarl/client:latest      env:      - name: PORT_ARGS        value: <span class="string">"--port=80"</span>      ports:      - containerPort: 80        name: web-port        protocol: TCP</code></pre></li></ul><hr><p>minReadySeconds : pod이 Ready 단계 부터 Available 단계 까지 식단 차이 시간을 설정하지 않으면 ready에서 곧바로 avaliable이 되고 순단 현상이 일어난다. 적절한 시간을 테스트하여 설정하는것이 좋다.</p><p>strategy.type : “Recreate” or “RollingUpdate”를 설정가능. 기본값은 “RollingUpdate”, Recreate의 경우 Pod가 삭제된 후 재생성</p><p>strategy.rollingUpdate.maxSurge : rolling update 중 정해진 Pod 수 이상으로 만들 수 있는 Pod의 최대 개수. 기본값은 25%</p><p>strategy.rollingUpdate.maxUnavailable : rolling update 중 unavailable 상태인 Pod의 최대 개수를 설정. rollgin update 중 사용할 수 없는 Pod의 최대 개수. 값은 0보다 큰 정수를 통해 Pod의 절대 개수 설정이 가능하고, “25%“와 같이 percentage 표현 가능 . maxUnavailable에서 percentage 계산은 rounding down(내림) 방식이며 기본값은 25% 이다. maxSurge와 maxUnavailable 값이 동시에 0이 될 수 없다.</p><hr><h3 id="3-배포-테스트"><a href="#3-배포-테스트" class="headerlink" title="3. 배포 테스트"></a>3. 배포 테스트</h3><ul><li>운영중인 상태</li></ul><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/rolling-pre-dashboard.PNG" alt="Alt text"></p><hr><ul><li>rolling update 중인 상태</li></ul><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/rolling-ing.PNG" alt="Alt text"></p><hr><ul><li>update 완료 상태</li></ul><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/rolling-post-dashboard.PNG" alt="Alt text"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-개요&quot;&gt;&lt;a href=&quot;#1-개요&quot; class=&quot;headerlink&quot; title=&quot;1. 개요&quot;&gt;&lt;/a&gt;1. 개요&lt;/h3&gt;&lt;p&gt;서비스 중단 없이 애플리케이션을 업데이트 하기 위해서, Kubernetes에서는 rolling up
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://skarlsla.github.io/categories/Kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://skarlsla.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>nginx-ingress ssl 적용</title>
    <link href="https://skarlsla.github.io/2018/07/28/kubernetes_ingress_https/"/>
    <id>https://skarlsla.github.io/2018/07/28/kubernetes_ingress_https/</id>
    <published>2018-07-28T04:10:53.000Z</published>
    <updated>2018-09-19T08:38:44.132Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-secret-생성"><a href="#1-secret-생성" class="headerlink" title="1. secret 생성"></a>1. secret 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret tls <span class="built_in">test</span>-secret --key _test_SHA256WITHRSA.key --cert test_ssl.crt</span><br></pre></td></tr></table></figure><hr><h3 id="2-ingress-rule-수정"><a href="#2-ingress-rule-수정" class="headerlink" title="2. ingress rule 수정"></a>2. ingress rule 수정</h3><ul><li>default-back-end-service.yaml<pre><code class="bash">apiVersion: extensions/v1beta1kind: Ingressmetadata:name: nginx-ingressnamespace: defaultspec:tls:- hosts:  - www.test.com  - m.test.com  secretName: <span class="built_in">test</span>-secretrules:- host: [svc1 도메인]  http:    paths:    - backend:        serviceName: backend-svc-1        servicePort: 80- host: [svc2 도메인]  http:    paths:    - backend:        serviceName: backend-svc-2        servicePort: 80- host: [통합 도메인]  http:    paths:    - path: /svc1      backend:        serviceName: backend-svc-1        servicePort: 80    - path: /svc2      backend:        serviceName: backend-svc-2        servicePort: 80    - path: /nginx_status      backend:        serviceName: nginx-ingress-nodeport        servicePort: 18080</code></pre></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-secret-생성&quot;&gt;&lt;a href=&quot;#1-secret-생성&quot; class=&quot;headerlink&quot; title=&quot;1. secret 생성&quot;&gt;&lt;/a&gt;1. secret 생성&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://skarlsla.github.io/categories/Kubernetes/"/>
    
    
      <category term="ingress" scheme="https://skarlsla.github.io/tags/ingress/"/>
    
  </entry>
  
  <entry>
    <title>알고리즘 연습문제</title>
    <link href="https://skarlsla.github.io/2018/07/26/algori/"/>
    <id>https://skarlsla.github.io/2018/07/26/algori/</id>
    <published>2018-07-26T05:39:13.000Z</published>
    <updated>2018-07-25T08:01:46.676Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-slice-max"><a href="#1-slice-max" class="headerlink" title="1. slice max"></a>1. slice max</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 정수값을 가진 배열이 있을 때, 임의의 x,y,z 값을 정하고, 0&lt;= x &lt; y &lt; z &lt;= arr.length 라고 정의한다.</span></span><br><span class="line"><span class="comment">문제) a[x+1]에서 a[y-1] 사이의 값들과 a[y+1]에서 a[z-1] 사이의 값을 모두 더했을 때 최대값은 무엇인지 구하시오.</span></span><br><span class="line"><span class="comment">function slice(arr)</span></span><br><span class="line"><span class="comment">(3 &lt;= arr.length &lt;= 100,000)</span></span><br><span class="line"><span class="comment">(-10,000 &lt;= n &lt;= 10,000)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">예를 들어 a = [3,2,6, -1,4,5, -1,2] 일 때,</span></span><br><span class="line"><span class="comment">(x=0, y=3, z=6) 일 때 a[1] + a[2] + a[4] + a[5] =&gt; 2 + 6 + 4 + 5 = 17,</span></span><br><span class="line"><span class="comment">(0, 3, 7) a[1] + a[2] + a[4] + a[5] + a[6] =&gt; 2 + 6 + 4 + 5 − 1 = 16,</span></span><br><span class="line"><span class="comment">(3, 4, 5) 사이 값이 없으므로 0.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">따라서 최대값은 17이 된다. */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slice_origin</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span> ;</span><br><span class="line">    <span class="comment">// x = 0~ arr.length-3</span></span><br><span class="line">    <span class="comment">// y = 1~ arr.length-2</span></span><br><span class="line">    <span class="comment">// z = 2~ arr.length-1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>; x&lt;arr.length<span class="number">-3</span>; x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> y=<span class="number">0</span>; y&lt;arr.length<span class="number">-2</span>; y++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> z=<span class="number">0</span>; z&lt;arr.length<span class="number">-1</span>; z++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(x&lt;y &amp;&amp; y&lt;z)&#123;</span><br><span class="line">                    <span class="keyword">var</span> temp_sum = sums(x,y,z,arr);</span><br><span class="line">                    <span class="keyword">if</span>(sum &lt; temp_sum)&#123;</span><br><span class="line">                        sum = temp_sum;         </span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"==="</span>);               </span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"sum"</span>+sum);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"==="</span>);     </span><br><span class="line">                        <span class="built_in">console</span>.log(x,y,z);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"==="</span>);     </span><br><span class="line">                    &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sums</span>(<span class="params">x,y,z,arr</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> xy = arr.slice(x+<span class="number">1</span>,y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;xy.length; i++)&#123;          </span><br><span class="line">            sum += xy[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> yz = arr.slice(y+<span class="number">1</span>,z);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;yz.length; j++)&#123;</span><br><span class="line">            sum += yz[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">-3</span>,<span class="number">-1</span>,<span class="number">10</span>,<span class="number">-6</span>,<span class="number">-3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">-1</span>,<span class="number">-5</span>,<span class="number">-1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">-5</span>,<span class="number">-1</span>,<span class="number">-5</span>,<span class="number">-11111</span>,<span class="number">-2</span>,<span class="number">0</span>,<span class="number">-9</span>,<span class="number">-10</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">-1</span>];<span class="comment">//  [200,6,1,4,5,1,10,2,4,6,-100,-10000] ;</span></span><br><span class="line">slice_origin(arr);</span><br></pre></td></tr></table></figure><hr><h3 id="2-bracket"><a href="#2-bracket" class="headerlink" title="2. bracket"></a>2. bracket</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Visual Studio Code와 유사한 Editor+++라는 에디터가 있다.</span></span><br><span class="line"><span class="comment">Visual Studio Code에서는 괄호를 입력하면 자동으로 닫는 괄호가 입력되는 것처럼 Editor+++도 자동으로 괄호를 닫는다.</span></span><br><span class="line"><span class="comment">그런데 Editor+++는 가끔 버그로 인해 닫는 괄호를 늦게 다는 경우가 있다. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">여기에 Editor+++에서 작성한 텍스트가 있는데 이 텍스트를 Visual Studio Code로 복사하고자 하는데</span></span><br><span class="line"><span class="comment">이 때 괄호가 올바른지 아래와 같이 검증하고자 한다.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">예를 들어 (), &#123;()&#125; &#123;()()&#125; 처럼 입력할 때 닫는 괄호가 올바르게 표시되며 이는 올바른 형태이다.</span></span><br><span class="line"><span class="comment">그러나 ([)()] 의 경우 모두 쌍은 맞으나 괄호가 올바를 위치에 있지 않으므로 이는 올바르지 않은 형태이다.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">문제) Editor+++에서 작성한 괄호값을 가진 임의의 텍스트가 있을 때, Visual Studio Code에서 인식이 가능한지 파악하고, 가능하면 true, 불가능하면 false를 출력하라. */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bracket_replace</span>(<span class="params">str</span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> result = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(str.length%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> startlength = str.length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        str = str.replace(<span class="regexp">/\(\)|\&#123;\&#125;|\[\]/g</span>,<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">if</span>(str.length==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.length == startlength) result = <span class="literal">false</span>;</span><br><span class="line">        startlength=str.length;</span><br><span class="line">    &#125; <span class="keyword">while</span> (result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-count-arr"><a href="#3-count-arr" class="headerlink" title="3. count arr"></a>3. count arr</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 배열 A가 있다. 이 배열은 배열 B의 몇번째 위치에 값을 증가(++) 시켜야 하는지에 대한 정보를 담고 있다.</span></span><br><span class="line"><span class="comment">예를 들어 a = [3,4,4,5,1,4,4] 인 배열이 있다고 할 때,</span></span><br><span class="line"><span class="comment">a[0]= 3 이므로 배열의 3번째 값을 증가 시켜라 (0,0,1,0,0)</span></span><br><span class="line"><span class="comment">a[1]= 4 이므로 배열의 4번째 값을 증가 시켜라 (0,0,1,1,0)</span></span><br><span class="line"><span class="comment">a[2]= 4 이므로 배열의 4번째 값을 증가 시켜라 (0,0,1,2,0)</span></span><br><span class="line"><span class="comment">이 것을 반복하면 배열 B는 [1,0,1,4,1] 값을 갖는다. */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count_arr</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = arr.reduce( <span class="function"><span class="keyword">function</span> (<span class="params">previous, current</span>) </span>&#123; </span><br><span class="line"><span class="keyword">return</span> previous &gt; current ? previous:current;</span><br><span class="line">&#125;);</span><br><span class="line">    <span class="keyword">var</span> return_arr = <span class="keyword">new</span> <span class="built_in">Array</span>(max);</span><br><span class="line">    return_arr.fill(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> arr)&#123;</span><br><span class="line">        return_arr[val<span class="number">-1</span>] = return_arr[val<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> return_arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-quick-sort"><a href="#4-quick-sort" class="headerlink" title="4. quick sort"></a>4. quick sort</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.quickSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> r = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> less = [], greater = [];</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">var</span> pivot = r.splice(<span class="built_in">Math</span>.floor(r.length / <span class="number">2</span>),<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"중간지점값:"</span>+pivot);</span><br><span class="line">     <span class="comment">// 중간값 기준 작은 값 or 큰 값</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = r.length - <span class="number">1</span> ; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">      <span class="keyword">if</span> ( r[i] &lt;= pivot) &#123;</span><br><span class="line">        less.push(r[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        greater.push(r[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">var</span> c = [];</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> c.concat(less.quickSort(), pivot, greater.quickSort());</span><br><span class="line">  </span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> a = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">43</span>,<span class="number">5</span>,<span class="number">123</span>,<span class="number">6</span>,<span class="number">231</span>,<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">console</span>.log(a.quickSort());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-slice-max&quot;&gt;&lt;a href=&quot;#1-slice-max&quot; class=&quot;headerlink&quot; title=&quot;1. slice max&quot;&gt;&lt;/a&gt;1. slice max&lt;/h3&gt;&lt;figure class=&quot;highlight javas
      
    
    </summary>
    
      <category term="algorithm" scheme="https://skarlsla.github.io/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="https://skarlsla.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>nginx 컨테이너를 활용한 ingress load balancer 구성</title>
    <link href="https://skarlsla.github.io/2018/07/25/kubernetes_ingressLB/"/>
    <id>https://skarlsla.github.io/2018/07/25/kubernetes_ingressLB/</id>
    <published>2018-07-25T06:30:13.000Z</published>
    <updated>2018-07-25T04:17:40.001Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-테스트용-웹-백엔드-생성"><a href="#1-테스트용-웹-백엔드-생성" class="headerlink" title="1. 테스트용 웹 백엔드 생성"></a>1. 테스트용 웹 백엔드 생성</h3><ul><li>back-end-deployment.yaml<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deploy-test-1</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: web-front-end</span><br><span class="line">        department: group1</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: m-client-web</span><br><span class="line">        image: xxx/client:latest</span><br><span class="line">        env:</span><br><span class="line">        - name: PORT_ARGS</span><br><span class="line">          value: <span class="string">"--port=80"</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          name: web-port</span><br><span class="line">          protocol: TCP</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deploy-test-2</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: web-front-end</span><br><span class="line">        department: group2</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: tiny-webserver-2</span><br><span class="line">        image: xxx/node-api:latest</span><br><span class="line">        env:</span><br><span class="line">        - name: PORT_ARGS</span><br><span class="line">          value: <span class="string">"--port=3501"</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 3501</span><br><span class="line">          name: web-port</span><br><span class="line">          protocol: TCP</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>back-end-service.yaml<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: backend-svc-1</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: web-port</span><br><span class="line">  selector:</span><br><span class="line">    app: web-front-end</span><br><span class="line">    department: group1</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: backend-svc-2</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: web-port</span><br><span class="line">  selector:</span><br><span class="line">    app: web-front-end</span><br><span class="line">    department: group2</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>실행<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f back-end-deployment.yaml</span><br><span class="line">kubectl apply -f back-end-service.yaml</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="2-테스트용-ingress용-백엔드-생성"><a href="#2-테스트용-ingress용-백엔드-생성" class="headerlink" title="2. 테스트용 ingress용 백엔드 생성"></a>2. 테스트용 ingress용 백엔드 생성</h3><ul><li><p>default-back-end-deployment.yaml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: default-http-backend</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: default-http-backend</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      containers:</span><br><span class="line">      - name: default-http-backend</span><br><span class="line">        <span class="comment"># Any image is permissable as long as:</span></span><br><span class="line">        <span class="comment"># 1. It serves a 404 page at /</span></span><br><span class="line">        <span class="comment"># 2. It serves 200 on a /healthz endpoint</span></span><br><span class="line">        image: gcr.io/google_containers/defaultbackend:1.0</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /healthz</span><br><span class="line">            port: 8080</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 30</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 20Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 20Mi</span><br></pre></td></tr></table></figure></li><li><p>default-back-end-service.yaml</p></li></ul><pre><code class="bash">apiVersion: v1kind: Servicemetadata:  name: default-http-backendspec:  <span class="built_in">type</span>: ClusterIP  ports:  - port: 80    protocol: TCP    targetPort: 8080  selector:    app: default-http-backend</code></pre><hr><ul><li>실행<pre><code class="bash">kubectl apply -f default-back-end-deployment.yamlkubectl apply -f default-back-end-service.yaml</code></pre></li></ul><hr><h3 id="4-Nginx-Ingress-Controller-설정값-저장을-위한-Configmap-등록"><a href="#4-Nginx-Ingress-Controller-설정값-저장을-위한-Configmap-등록" class="headerlink" title="4. Nginx Ingress Controller 설정값 저장을 위한 Configmap 등록"></a>4. Nginx Ingress Controller 설정값 저장을 위한 Configmap 등록</h3><ul><li>configmap.yaml<pre><code class="bash">apiVersion: v1kind: ConfigMapmetadata:name: nginx-ingress-controller-conflabels:  app: nginx-ingress-lb  group: lbdata:<span class="comment"># for VTS page of the Nginx load balancer</span><span class="built_in">enable</span>-vts-status: <span class="string">'true'</span><span class="built_in">enable</span>-sticky-sessions: <span class="string">'true'</span></code></pre></li></ul><hr><h3 id="5-Nginx-Ingress-Controller-생성"><a href="#5-Nginx-Ingress-Controller-생성" class="headerlink" title="5. Nginx Ingress Controller 생성"></a>5. Nginx Ingress Controller 생성</h3><ul><li>SA, ClusterRole, ClusterRoleBinding</li></ul><pre><code class="bash"><span class="comment"># Add: SA, ClusterRole, ClusterRoleBinding</span><span class="comment"># Name Space: default</span>apiVersion: v1kind: ServiceAccountmetadata:  name: ingress  namespace: defaultapiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRolemetadata:  name: system:ingressrules:- apiGroups:  - <span class="string">""</span>  resources: [<span class="string">"configmaps"</span>,<span class="string">"secrets"</span>,<span class="string">"endpoints"</span>,<span class="string">"events"</span>,<span class="string">"services"</span>]  verbs: [<span class="string">"list"</span>,<span class="string">"watch"</span>,<span class="string">"create"</span>,<span class="string">"update"</span>,<span class="string">"delete"</span>,<span class="string">"get"</span>]- apiGroups:  - <span class="string">""</span>  - <span class="string">"extensions"</span>  resources: [<span class="string">"services"</span>,<span class="string">"nodes"</span>,<span class="string">"ingresses"</span>,<span class="string">"pods"</span>,<span class="string">"ingresses/status"</span>]  verbs: [<span class="string">"list"</span>,<span class="string">"watch"</span>,<span class="string">"create"</span>,<span class="string">"update"</span>,<span class="string">"delete"</span>,<span class="string">"get"</span>]apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata:  name: ingressroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: system:ingresssubjects:  - kind: ServiceAccount    name: ingress    <span class="comment"># Could be like 'kube-system' ...</span>    namespace: default</code></pre><hr><ul><li>deployment</li></ul><pre><code class="bash">apiVersion: extensions/v1beta1kind: Deploymentmetadata:  name: nginx-ingress-controller  <span class="comment"># Could be like 'kube-system' ...</span>  namespace: defaultspec:  replicas: 2  revisionHistoryLimit: 3  template:    metadata:      labels:        app: nginx-ingress-lb    spec:      serviceAccountName: ingress      terminationGracePeriodSeconds: 60      containers:        - name: nginx-ingress-controller          image: gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.2          imagePullPolicy: IfNotPresent          readinessProbe:            httpGet:              path: /healthz              port: 18080              scheme: HTTP          livenessProbe:            httpGet:              path: /healthz              port: 18080              scheme: HTTP            initialDelaySeconds: 10            timeoutSeconds: 5          args:            - /nginx-ingress-controller            - --default-backend-service=$(POD_NAMESPACE)/default-http-backend            - --configmap=$(POD_NAMESPACE)/nginx-ingress-controller-conf          env:            - name: POD_NAME              valueFrom:                fieldRef:                  fieldPath: metadata.name            - name: POD_NAMESPACE              valueFrom:                fieldRef:                  fieldPath: metadata.namespace          ports:            - containerPort: 443            - containerPort: 18080</code></pre><h3 id="5-Ingress-Rule-디플로이"><a href="#5-Ingress-Rule-디플로이" class="headerlink" title="5. Ingress Rule 디플로이"></a>5. Ingress Rule 디플로이</h3><ul><li>default-back-end-service.yaml<pre><code class="bash">apiVersion: extensions/v1beta1kind: Ingressmetadata:name: nginx-ingressnamespace: defaultspec:rules:- host: [svc1 도메인]  http:    paths:    - backend:        serviceName: backend-svc-1        servicePort: 80- host: [svc2 도메인]  http:    paths:    - backend:        serviceName: backend-svc-2        servicePort: 80- host: [통합 도메인]  http:    paths:    - path: /svc1      backend:        serviceName: backend-svc-1        servicePort: 80    - path: /svc2      backend:        serviceName: backend-svc-2        servicePort: 80    - path: /nginx_status      backend:        serviceName: nginx-ingress-nodeport        servicePort: 18080</code></pre></li></ul><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><p><a href="https://tistory3.daumcdn.net/tistory/467568/skin/images/Ingress-concept-and-logical-arch-v01.png" target="_blank" rel="noopener">Ingress Load Balancer 개념도</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-테스트용-웹-백엔드-생성&quot;&gt;&lt;a href=&quot;#1-테스트용-웹-백엔드-생성&quot; class=&quot;headerlink&quot; title=&quot;1. 테스트용 웹 백엔드 생성&quot;&gt;&lt;/a&gt;1. 테스트용 웹 백엔드 생성&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;back-
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://skarlsla.github.io/categories/Kubernetes/"/>
    
    
      <category term="ingress" scheme="https://skarlsla.github.io/tags/ingress/"/>
    
  </entry>
  
  <entry>
    <title>redis simple deployment 및 service 작성</title>
    <link href="https://skarlsla.github.io/2018/07/25/redis_pod/"/>
    <id>https://skarlsla.github.io/2018/07/25/redis_pod/</id>
    <published>2018-07-25T06:26:13.000Z</published>
    <updated>2018-07-25T04:10:09.330Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-deployment-및-service-yaml-작성"><a href="#1-deployment-및-service-yaml-작성" class="headerlink" title="1. deployment 및 service  yaml 작성"></a>1. deployment 및 service  yaml 작성</h3><ul><li>deployment<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">redis-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">100</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>service<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">redis-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-deployment-및-service-yaml-작성&quot;&gt;&lt;a href=&quot;#1-deployment-및-service-yaml-작성&quot; class=&quot;headerlink&quot; title=&quot;1. deployment 및 service  ya
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://skarlsla.github.io/categories/Kubernetes/"/>
    
    
      <category term="redis" scheme="https://skarlsla.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>docker build &amp; push to docker-hub</title>
    <link href="https://skarlsla.github.io/2018/07/25/docker/"/>
    <id>https://skarlsla.github.io/2018/07/25/docker/</id>
    <published>2018-07-25T05:22:13.000Z</published>
    <updated>2018-07-25T04:06:04.147Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-docker-이미지-추출"><a href="#1-docker-이미지-추출" class="headerlink" title="1. docker 이미지 추출"></a>1. docker 이미지 추출</h3><ul><li>node.js<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM node:9.4-alpine</span><br><span class="line">MAINTAINER authorize &lt;xxx@gmail.com&gt;</span><br><span class="line"><span class="comment">#작업 디렉토리</span></span><br><span class="line">WORKDIR /src</span><br><span class="line"><span class="comment">#원본 소스복사</span></span><br><span class="line">COPY ./freebex-integrated .</span><br><span class="line"><span class="comment"># npm 설치</span></span><br><span class="line">RUN npm install </span><br><span class="line"><span class="comment">#환경변수 NODE_ENV 의 값을 development 로 설정</span></span><br><span class="line"><span class="comment">#ENV NODE_ENV development</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#오픈할 포트 multi: EXPOSE 80 3000</span></span><br><span class="line">EXPOSE 3501</span><br><span class="line"><span class="comment">#CMD["npm","start"]</span></span><br><span class="line">CMD node ./bin/www</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>html on nginx<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#alpine image</span></span><br><span class="line">FROM nginx:alpine</span><br><span class="line"><span class="comment">#create the server and location configuration</span></span><br><span class="line">COPY default.conf /etc/nginx/conf.d/default.conf</span><br><span class="line"><span class="comment">#copies the build app to the default location</span></span><br><span class="line">COPY client/dist/mobile /usr/share/nginx/html</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="2-이미지-빌드"><a href="#2-이미지-빌드" class="headerlink" title="2. 이미지 빌드"></a>2. 이미지 빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --rm -f Dockerfile -t [image-name]:latest .</span><br></pre></td></tr></table></figure><hr><h3 id="3-이미지-푸시-docker-hub"><a href="#3-이미지-푸시-docker-hub" class="headerlink" title="3. 이미지 푸시(docker hub)"></a>3. 이미지 푸시(docker hub)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag [image-name]:latest [docker-hub ID]/[image-name]:latest</span><br><span class="line">docker push [docker-hub ID]/[image-name]:latest</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-docker-이미지-추출&quot;&gt;&lt;a href=&quot;#1-docker-이미지-추출&quot; class=&quot;headerlink&quot; title=&quot;1. docker 이미지 추출&quot;&gt;&lt;/a&gt;1. docker 이미지 추출&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;node.
      
    
    </summary>
    
      <category term="docker" scheme="https://skarlsla.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://skarlsla.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes dashboard 설치</title>
    <link href="https://skarlsla.github.io/2018/07/24/kubernetest_dash/"/>
    <id>https://skarlsla.github.io/2018/07/24/kubernetest_dash/</id>
    <published>2018-07-24T08:24:13.000Z</published>
    <updated>2018-07-24T08:03:10.293Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-dashboard-admin-rbac-heapster-설치"><a href="#1-dashboard-admin-rbac-heapster-설치" class="headerlink" title="1. dashboard,admin-rbac, heapster 설치"></a>1. dashboard,admin-rbac, heapster 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/DragOnMe/k8s-1.8-dashboard-heapster-mod.git</span><br><span class="line"><span class="built_in">cd</span> k8s-1.8.1-dashboard/</span><br><span class="line">kubectl apply -f kubernetes-dashboard.yaml</span><br><span class="line">kubectl apply -f kubernetes-dashboard-admin-rbac.yaml</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line">kubectl apply -f k8s-heapster/</span><br><span class="line"></span><br><span class="line">[root@localhost k8s-1.8.1-dashboard]<span class="comment"># kubectl get pods -nkube-system -w</span></span><br><span class="line">NAME                                            READY     STATUS    RESTARTS   AGE</span><br><span class="line">heapster-dfd674df9-k6vr7                        1/1       Running   0          3d</span><br><span class="line">kubernetes-dashboard-5bd6f767c7-2h6wv           1/1       Running   0          2d</span><br><span class="line">monitoring-grafana-76848b566c-cts9n             1/1       Running   0          3d</span><br><span class="line">monitoring-influxdb-6c4b84d695-d8j4t            1/1       Running   0          3d</span><br></pre></td></tr></table></figure><p>kubernetes-dashboard.yaml 수정</p><ol><li>image 변경 (1.8.1 -&gt; 1.8.3)</li><li>service nodeport 설정<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: kubernetes-dashboard</span><br><span class="line">        image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3</span><br><span class="line">//==========================================================</span><br><span class="line"></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># Added NodePort</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      <span class="comment"># Added nodePort: 30000</span></span><br><span class="line">      nodePort: 30000</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="2-dashboard-접근-token-조회"><a href="#2-dashboard-접근-token-조회" class="headerlink" title="2. dashboard 접근 token 조회"></a>2. dashboard 접근 token 조회</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># kubectl -n kube-system get secret | grep kubernetes-dashboard-admin</span></span><br><span class="line">kubernetes-dashboard-admin-token-mcx5k           kubernetes.io/service-account-token </span><br><span class="line">[root@localhost]<span class="comment"># kubectl describe -nkube-system secret kubernetes-dashboard-admin-token-mcx5k</span></span><br><span class="line">Name:         kubernetes-dashboard-admin-token-mcx5k</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name=kubernetes-dashboard-admin</span><br><span class="line">              kubernetes.io/service-account.uid=1d1aa7aa-30c1-11e8-a365-002590a7058c</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsInR....중략...</span><br><span class="line">FhyrXH_2ZZlAkYvm0oCT5VZMYCnKQ77NZEdyFXvZpsrXTA4BwfKyPFaFxUPKA</span><br></pre></td></tr></table></figure><hr><h3 id="3-서버local이-아닌-브라우저에서-접근하기위해-nginx수정"><a href="#3-서버local이-아닌-브라우저에서-접근하기위해-nginx수정" class="headerlink" title="3. 서버local이 아닌 브라우저에서 접근하기위해 nginx수정"></a>3. 서버local이 아닌 브라우저에서 접근하기위해 nginx수정</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name &lt;접근호스트&gt;;</span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate /etc/kubernetes/pki/ca.crt;</span><br><span class="line">        ssl_certificate_key  /etc/kubernetes/pki/ca.key;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass https://&lt;master-ip&gt;:30000;</span><br><span class="line">                proxy_http_version 1.1;</span><br><span class="line">                proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">                proxy_set_header Connection <span class="string">'upgrade'</span>;</span><br><span class="line">                proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">                proxy_cache_bypass <span class="variable">$http_upgrade</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-dashboard-admin-rbac-heapster-설치&quot;&gt;&lt;a href=&quot;#1-dashboard-admin-rbac-heapster-설치&quot; class=&quot;headerlink&quot; title=&quot;1. dashboard,admin-
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://skarlsla.github.io/categories/Kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://skarlsla.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 설치 For CentOS7</title>
    <link href="https://skarlsla.github.io/2018/07/19/kubernetest/"/>
    <id>https://skarlsla.github.io/2018/07/19/kubernetest/</id>
    <published>2018-07-19T06:22:13.000Z</published>
    <updated>2018-07-24T08:03:15.324Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-Docker-kubelet-kubeadm-설치-For-CentOS7"><a href="#1-Docker-kubelet-kubeadm-설치-For-CentOS7" class="headerlink" title="1. Docker, kubelet, kubeadm 설치(For CentOS7)"></a>1. Docker, kubelet, kubeadm 설치(For CentOS7)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://yum.kubernetes.io/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg</span><br><span class="line">       https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF </span><br><span class="line"></span><br><span class="line">$ setenforce 0</span><br><span class="line">$ systemctl <span class="built_in">disable</span> firewalld &amp;&amp; systemctl stop firewalld</span><br><span class="line">$ yum install -y docker</span><br><span class="line">$ yum install -y kubelet kubeadm kubectl kubernetes-cni</span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl restart docker</span><br><span class="line">$ systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure><ul><li>master 서버 AND cluster Node서버 동일설치</li></ul><hr><h3 id="2-MASTER-서버-초기화"><a href="#2-MASTER-서버-초기화" class="headerlink" title="2. MASTER 서버 초기화"></a>2. MASTER 서버 초기화</h3><ul><li>network add-on으로 flannel을 사용할 때는 ‘–pod-network-cidr’ 옵션이 필수이다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ sudo kubeadm init --pod-network-cidr 10.244.0.0/16</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">생략</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">Your Kubernetes master has initialized successfully!</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:</span><br><span class="line">    http://kubernetes.io/docs/admin/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of machines by running the following on each node:</span><br><span class="line"></span><br><span class="line">kubeadm join --token=872aa9.d7610d83eabce1a4 &lt;master ip&gt;</span><br></pre></td></tr></table></figure><ul><li>초기화시 옵션 –kubernetes-version v1.9.2 –feature-gates CoreDNS=false</li></ul><hr><h3 id="3-Master에서-Pod-수행-For-TEST"><a href="#3-Master에서-Pod-수행-For-TEST" class="headerlink" title="3. Master에서 Pod 수행(For TEST)"></a>3. Master에서 Pod 수행(For TEST)</h3><ul><li>기본적으로 클러스터는 보안 문제로 master에서 pod를 스케줄링 하지 않는다. 하지만, 예를 들어 테스트할때 노드가 부족하거나 단일 노드에서 개발 용으로 kubernetes 클러스터를 사용할 때, master에서 pod를 스케줄링하도록 명령할 수 있다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><hr><h3 id="4-pod-network-add-on-설치"><a href="#4-pod-network-add-on-설치" class="headerlink" title="4. pod network add-on 설치"></a>4. pod network add-on 설치</h3><ul><li>사용 가능한 network add-on 목록 중 하나를 선택한다. 클러스터 당 하나의 pod network만 설치할 수 있다. 각 network add-on 링크에 접속하면 설치 방법이 나와있다. ‘Weave Net’ 과 ‘Flannel’만이 멀티 플랫폼 환경(amd64, arm64, arhtp)을 지원한다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line">sysctl net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><hr><h3 id="5-Cluster-Node-Join"><a href="#5-Cluster-Node-Join" class="headerlink" title="5. Cluster Node Join"></a>5. Cluster Node Join</h3><ul><li>Master에서 Pod network설치가 완료되어 ‘kube-dns’가 Running 상태가 되었는지 확인한다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods --namespace=kube-system</span><br><span class="line">NAME                                            READY     STATUS    RESTARTS   AGE</span><br><span class="line">etcd-localhost.localdomain                      1/1       Running   0          3d</span><br><span class="line">kube-apiserver-localhost.localdomain            1/1       Running   0          3d</span><br><span class="line">kube-controller-manager-localhost.localdomain   1/1       Running   0          3d</span><br><span class="line">kube-dns-6f4fd4bdf-x4k6t                        3/3       Running   0          3d</span><br><span class="line">kube-flannel-ds-c5l2w                           1/1       Running   1          1d</span><br><span class="line">kube-flannel-ds-fxknd                           1/1       Running   2          3d</span><br><span class="line">kube-proxy-dg7xd                                1/1       Running   0          3d</span><br><span class="line">kube-proxy-pmbsb                                1/1       Running   0          1d</span><br><span class="line">kube-scheduler-localhost.localdomain            1/1       Running   0          3d</span><br></pre></td></tr></table></figure><ul><li>node 서버가 접속하여 master init에서 나온 결과를 입력한다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@node1]<span class="comment"># kubeadm join --token 64dd18.cb6f66d53a1b8710  [master-ip]:6443 </span></span><br><span class="line">--discovery-token-ca-cert-hash sha256:c5e8554a75dae6a7701dc12043cf6d2576842a4e360b24d38971fe0911c412ba </span><br><span class="line"></span><br><span class="line"><span class="comment">#마스터서버에서</span></span><br><span class="line">[root@master1]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME              STATUS    ROLES     AGE       VERSION</span><br><span class="line">master1           Ready     master    3d        v1.9.6</span><br><span class="line">node1             Ready     node      1d        v1.9.6</span><br></pre></td></tr></table></figure><hr><h3 id="6-RESET-KUBERNETES-MASTER-AND-CLUSTER"><a href="#6-RESET-KUBERNETES-MASTER-AND-CLUSTER" class="headerlink" title="6. RESET KUBERNETES(MASTER AND CLUSTER)"></a>6. RESET KUBERNETES(MASTER AND CLUSTER)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br><span class="line">systemctl stop kubelet</span><br><span class="line">systemctl stop docker</span><br><span class="line">rm -rf /var/lib/cni/</span><br><span class="line">rm -rf /var/lib/kubelet/*</span><br><span class="line">rm -rf /etc/cni/</span><br><span class="line">ifconfig cni0 down</span><br><span class="line">ifconfig flannel.1 down</span><br><span class="line">ifconfig docker0 down</span><br><span class="line">ip link delete cni0</span><br><span class="line">ip link delete flannel.1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-Docker-kubelet-kubeadm-설치-For-CentOS7&quot;&gt;&lt;a href=&quot;#1-Docker-kubelet-kubeadm-설치-For-CentOS7&quot; class=&quot;headerlink&quot; title=&quot;1. Docker
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://skarlsla.github.io/categories/Kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://skarlsla.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>마크다운 문법</title>
    <link href="https://skarlsla.github.io/2018/07/19/markdonw%EB%AC%B8%EB%B2%95/"/>
    <id>https://skarlsla.github.io/2018/07/19/markdonw문법/</id>
    <published>2018-07-19T03:55:14.000Z</published>
    <updated>2018-07-19T06:22:46.860Z</updated>
    
    <content type="html"><![CDATA[<h3 id="lt-헤더-gt"><a href="#lt-헤더-gt" class="headerlink" title="&lt;헤더&gt;"></a>&lt;헤더&gt;</h3><p>H1 = #<br>H2 = ##<br>…<br>H6 = ######</p><h3 id="강조"><a href="#강조" class="headerlink" title="강조"></a>강조</h3><p><em>이건 이탈릭체(기울이기)입니다.</em></p><p><em>이것도 이탈릭체(기울이기)입니다.</em></p><p><strong>이건 볼드체(굵은 체)입니다.</strong></p><p><strong>이것도 볼드체(굵은 체)입니다.</strong></p><p><del>이건 취소선입니다</del></p><p><em><em>둘</em>을 같이 써 볼까요?</em></p><h3 id="lt-블록-인용-gt"><a href="#lt-블록-인용-gt" class="headerlink" title="&lt;블록 인용&gt;"></a>&lt;블록 인용&gt;</h3><blockquote><p>이렇게 </p><blockquote><p>이렇게</p><blockquote><p>이렇게</p></blockquote></blockquote></blockquote><h3 id="구분선"><a href="#구분선" class="headerlink" title="구분선"></a>구분선</h3><hr><p>가로선</p><h3 id="리스트-표현방법"><a href="#리스트-표현방법" class="headerlink" title="리스트 표현방법"></a>리스트 표현방법</h3><ul><li>플러스</li></ul><ul><li>별<br>– 하이픈</li></ul><h3 id="숫자리스트"><a href="#숫자리스트" class="headerlink" title="숫자리스트"></a>숫자리스트</h3><ol><li>숫자1</li><li>숫자2</li></ol><h3 id="링크"><a href="#링크" class="headerlink" title="링크"></a>링크</h3><p><a href="teragoon.wordpress.com">블로그</a></p><h3 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h3><p>무조건 빈줄을 하나 넣어줘 준 다음 공백 4개(”    “) 로 시작하면 됩니다.</p><p>또는 “<code>로 시작해서 “</code> 으로 끝내면 됩니다.</p><p>코드 안에서는 자동으로 escap 처리를 해줍니다.(&lt;, &gt; 등등)</p><p>리스트안에서 코드는 “` 로 해줘야 합니다.</p><p>“<code>var i = 0“</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'javascript 코드를 적어주세요. 이렇게 하면 파이썬 문법에 맞게 코드를 예쁘게 보여줍니다.'</span><span class="string">''</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;lt-헤더-gt&quot;&gt;&lt;a href=&quot;#lt-헤더-gt&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;헤더&amp;gt;&quot;&gt;&lt;/a&gt;&amp;lt;헤더&amp;gt;&lt;/h3&gt;&lt;p&gt;H1 = #&lt;br&gt;H2 = ##&lt;br&gt;…&lt;br&gt;H6 = ######&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
