<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://skarlsla.github.io/"/>
  <updated>2019-07-17T09:06:46.825Z</updated>
  <id>https://skarlsla.github.io/</id>
  
  <author>
    <name>NamGi YOON</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[WEBSERVER] JWT(JSON WEB TOKEN)? </title>
    <link href="https://skarlsla.github.io/2019/07/17/webserver-auth2/"/>
    <id>https://skarlsla.github.io/2019/07/17/webserver-auth2/</id>
    <published>2019-07-17T08:43:11.000Z</published>
    <updated>2019-07-17T09:06:46.825Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="JWT-JSON-Web-Token"><a href="#JWT-JSON-Web-Token" class="headerlink" title="JWT(JSON Web Token)?"></a>JWT(JSON Web Token)?</h3><p>JSON형식으로 웹에서 사용하는 토큰? JSON 객체로서 당사자간에 안전하게 정보를 전송할 수있는 작고<br>독립적 인 방법을 정의하는 공개 표준 ( RFC 7519 )이라고 한다.  </p><p><strong>사용?</strong><br>토큰기반인증에 사용하거나 안전한 정보교환이 필요할때 유용하다고 한다.</p><p><strong>구조?</strong><br>.을 구분자로 3가지의 문자열로 되어있다. 헤더(header).내용(payload).서명(signature)</p><p><strong>헤더:</strong><br>{<br>  “typ”: “JWT”,  // 토큰타입<br>  “alg”: “HS256” // 해싱 알고리즘정보<br>}</p><p><strong>내용:</strong><br>정보의 한 ‘조각’ 을 클레임이라고 한다.클레임은 사용자에 대한 프로퍼티나 속성을 넣는다.<br>registered, public, private claims으로 구분한다.</p><p>registered claim<br>미리 정의된 claim으로써, 토큰에 대한 정보이다. </p><p>public claim<br>공개적인 claim을 명시하는데, 충돌 방지를 위해 URI 형식으로 작성한다. </p><p>private claim<br>서버와 클라이언트가 협의한 claim을 명시한다.<br>이미 정해져 있는 이름을 가진 아래의 7개에 대한 정보를 담을 수 있다. </p><p>iss : Token 발행자(Issuer)<br>sub : Token의 제목 (Subject)<br>aud : Token 의 대상자 (Audience)<br>exp : Token의 유효한 날짜 정보(Expiration time)<br>nbf : Token 의 유효 시작 날짜 정보 (Not before)<br>iat : Token의 발행된 날짜 정보(Issued At)<br>jti : Token 의 고유 식별자(JWT ID) </p><p>Claim을 JSON 행태로 정의한다.</p><p>예시:<br>{<br>  “userId”:”skarl”,<br>  “exp”: “1485270000000”,<br>  “role”:[“admin”]<br>}<br>사용시에는 BASE64 인코딩을 통해서 문자열로 변환한다.</p><p><strong>서명:</strong><br>서명은 헤더의 인코딩값과, 정보의 인코딩값을 합친후 주어진 비밀키로 해쉬를 하여 생성한다.</p><p>서명을 만드는 수도코드 구조<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  &quot;kkkkmysecret&quot;)</span><br></pre></td></tr></table></figure></p><p>해쉬 -&gt; base64로 인코딩 후 사용</p><p>like this<br>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJza2FybCIsImV4cCI6IjE0ODUyNzAwMDAwMDAiLCJyb2xlIjpbImFkbWluIl19.jAafdBOQCoZkV-xMcJx0BCTH45AqYtf9mcdKog4ewjc</p><p><strong>example</strong><br><a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a> 공식 홈페이지에서 테스트 해볼 수 있다.</p><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/JWT.PNG" alt="공홈 테스트"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;JWT-JSON-Web-Token&quot;&gt;&lt;a href=&quot;#JWT-JSON-Web-Token&quot; class=&quot;headerlink&quot; title=&quot;JWT(JSON Web Token)?&quot;&gt;&lt;/a&gt;JWT(JSON Web Token)?&lt;/h3&gt;
      
    
    </summary>
    
      <category term="webserver" scheme="https://skarlsla.github.io/categories/webserver/"/>
    
    
      <category term="oauth" scheme="https://skarlsla.github.io/tags/oauth/"/>
    
      <category term="jwt" scheme="https://skarlsla.github.io/tags/jwt/"/>
    
      <category term="인증" scheme="https://skarlsla.github.io/tags/%EC%9D%B8%EC%A6%9D/"/>
    
  </entry>
  
  <entry>
    <title>[WEBSERVER] session/cookie or token</title>
    <link href="https://skarlsla.github.io/2019/07/17/webserver-auth/"/>
    <id>https://skarlsla.github.io/2019/07/17/webserver-auth/</id>
    <published>2019-07-17T07:43:15.000Z</published>
    <updated>2019-07-17T09:35:45.264Z</updated>
    
    <content type="html"><![CDATA[<h3 id="인증방식"><a href="#인증방식" class="headerlink" title="인증방식"></a>인증방식</h3><p><strong>1. 서버기반</strong><br>HTTP프로토콜을 기반으로하는 통신에서 client가 요청시 한번 response후에는 특별한 처리를 하지 않는이상<br>접속을 끊는다.  만약 최초 로그인을 했다고 하더라고 그후에 요청시 client의 정보는 없다는 것이다.<br>그래서 서버에서 세션을 만들어주고 쿠키를 사용하여 문제를 해결한다.</p><p>로그인 -&gt; 서버에서 session-id 생성 전달 -&gt; client sessionId 쿠키에 저장 후 사용 </p><p><strong>장단점</strong><br>일반적인 웹서비스에서 많이 쓰이는 인증방식이다. 쿠키자체에 주요정보가 있지 않아 안전한편<br>서버에서 세션및쿠키를 관리하기때문에 사용자가 많아지면 확장이 필요하다.<br>확장을 위해 메모리DB등을 사용해야한다.</p><hr><h3 id="세션기반-흐름"><a href="#세션기반-흐름" class="headerlink" title="세션기반 흐름"></a>세션기반 흐름</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/session-seq.PNG" alt="시퀀스 다이어~"></p><hr><p><strong>2. 토큰기반</strong><br>서버에서 발행한 토큰을 이용해 인증처리를 한다.</p><p>요청시 헤더에 토큰값을 보내면 서버에서 토큰검증만 하면된다.</p><p>로그인 -&gt; 서버에서 로긴처리후 token발급 -&gt; client에서 요청시 헤더에 token</p><p><strong>장단점</strong><br>확장을 위한 메모리DB등을 사용할 필요없다.<br>쿠키로 인한 사이트간 요청위조를 방지 할수있다.<br>도메인 상관없이 토큰으로 인증<br>토큰 탈취시 보안에 취약 하지만 refresh_token과 access_token의 주기 설정으로 어느정도 방어가능</p><hr><h3 id="토큰기반-흐름"><a href="#토큰기반-흐름" class="headerlink" title="토큰기반 흐름"></a>토큰기반 흐름</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/jwt-seq.PNG" alt="시퀀스 다이어~"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;인증방식&quot;&gt;&lt;a href=&quot;#인증방식&quot; class=&quot;headerlink&quot; title=&quot;인증방식&quot;&gt;&lt;/a&gt;인증방식&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1. 서버기반&lt;/strong&gt;&lt;br&gt;HTTP프로토콜을 기반으로하는 통신에서 client가 요청시 
      
    
    </summary>
    
      <category term="webserver" scheme="https://skarlsla.github.io/categories/webserver/"/>
    
    
      <category term="oauth" scheme="https://skarlsla.github.io/tags/oauth/"/>
    
      <category term="session" scheme="https://skarlsla.github.io/tags/session/"/>
    
      <category term="jwt" scheme="https://skarlsla.github.io/tags/jwt/"/>
    
      <category term="인증" scheme="https://skarlsla.github.io/tags/%EC%9D%B8%EC%A6%9D/"/>
    
  </entry>
  
  <entry>
    <title>[JENKINS] pipeline 작성 </title>
    <link href="https://skarlsla.github.io/2019/07/11/jenkins-pipeline/"/>
    <id>https://skarlsla.github.io/2019/07/11/jenkins-pipeline/</id>
    <published>2019-07-11T10:11:03.000Z</published>
    <updated>2019-07-11T10:25:27.915Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="git-lab-설정에서-webhook-push-Event-이후-작성-정의-pipeline"><a href="#git-lab-설정에서-webhook-push-Event-이후-작성-정의-pipeline" class="headerlink" title="git lab 설정에서 webhook (push Event) 이후 작성 정의(pipeline)"></a>git lab 설정에서 webhook (push Event) 이후 작성 정의(pipeline)</h3><p>pipeline script</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">pipeline</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">agent</span> <span class="string">any</span></span><br><span class="line">     </span><br><span class="line">  <span class="string">tools</span> <span class="string">&#123;nodejs</span> <span class="string">"node"</span><span class="string">&#125;</span></span><br><span class="line">     </span><br><span class="line">  <span class="string">stages</span> <span class="string">&#123;</span>       </span><br><span class="line">    <span class="string">stage('Cloning</span> <span class="string">Git')</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">steps</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">git</span> <span class="attr">url:</span> <span class="string">'https://xxx.xxxxx.com/bittorage/WebServer.git'</span><span class="string">,</span></span><br><span class="line"><span class="attr">        credentialsId:</span> <span class="string">'gitlab-skarl-passwd'</span><span class="string">,</span></span><br><span class="line"><span class="attr">        branch:</span> <span class="string">'develop'</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">         </span><br><span class="line">    <span class="string">stage('Install</span> <span class="string">dependencies')</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">steps</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">sh</span> <span class="string">'npm install'</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">     </span><br><span class="line">    <span class="string">stage('Test')</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">steps</span> <span class="string">&#123;</span></span><br><span class="line">         <span class="string">sh</span> <span class="string">'npm test'</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span>  </span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/pipeline.png" alt="실행"></p><h3 id="로그"><a href="#로그" class="headerlink" title="로그"></a>로그</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">Started by GitLab push by </span><br><span class="line">Running in Durability level: MAX_SURVIVABILITY</span><br><span class="line">[Pipeline] Start of Pipeline</span><br><span class="line">[Pipeline] node</span><br><span class="line">Running on Jenkins in /var/lib/jenkins/workspace/pipe1</span><br><span class="line">[Pipeline] &#123;</span><br><span class="line">[Pipeline] stage</span><br><span class="line">[Pipeline] &#123; (Declarative: Tool Install)</span><br><span class="line">[Pipeline] tool</span><br><span class="line">[Pipeline] envVarsForTool</span><br><span class="line">[Pipeline] &#125;</span><br><span class="line">[Pipeline] // stage</span><br><span class="line">[Pipeline] withEnv</span><br><span class="line">[Pipeline] &#123;</span><br><span class="line">[Pipeline] stage</span><br><span class="line">[Pipeline] &#123; (Cloning Git)</span><br><span class="line">[Pipeline] tool</span><br><span class="line">[Pipeline] envVarsForTool</span><br><span class="line">[Pipeline] withEnv</span><br><span class="line">[Pipeline] &#123;</span><br><span class="line">[Pipeline] git</span><br><span class="line">using credential gitlab-skarl-passwd</span><br><span class="line"> &gt; git rev-parse --is-inside-work-tree # timeout=10</span><br><span class="line">Fetching changes from the remote Git repository</span><br><span class="line"> &gt; git config remote.origin.url https://xxx.xxxxxxx.com/bittorage/WebServer.git # timeout=10</span><br><span class="line">Fetching upstream changes from https://xxx.xxxxxxx.com/bittorage/WebServer.git</span><br><span class="line"> &gt; git --version # timeout=10</span><br><span class="line">using GIT_ASKPASS to set credentials gitlab-skarl-passwd</span><br><span class="line"> &gt; git fetch --tags --progress https://xxx.xxxxxxx.com/bittorage/WebServer.git +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">skipping resolution of commit remotes/origin/develop, since it originates from another repository</span><br><span class="line"> &gt; git rev-parse refs/remotes/origin/develop^&#123;commit&#125; # timeout=10</span><br><span class="line"> &gt; git rev-parse refs/remotes/origin/origin/develop^&#123;commit&#125; # timeout=10</span><br><span class="line">Checking out Revision 449b52612009786e6e7ae37841f57b3602fc89ff (refs/remotes/origin/develop)</span><br><span class="line"> &gt; git config core.sparsecheckout # timeout=10</span><br><span class="line"> &gt; git checkout -f 449b52612009786e6e7ae37841f57b3602fc89ff</span><br><span class="line"> &gt; git branch -a -v --no-abbrev # timeout=10</span><br><span class="line"> &gt; git branch -D develop # timeout=10</span><br><span class="line"> &gt; git checkout -b develop 449b52612009786e6e7ae37841f57b3602fc89ff</span><br><span class="line">Commit message: &quot;모카 테스트 예제  추가&quot;</span><br><span class="line"> &gt; git rev-list --no-walk a7271488613cc3aeb66bd06be08603e458a57c40 # timeout=10</span><br><span class="line">[Pipeline] &#125;</span><br><span class="line">[Pipeline] // withEnv</span><br><span class="line">[Pipeline] &#125;</span><br><span class="line">[Pipeline] // stage</span><br><span class="line">[Pipeline] stage</span><br><span class="line">[Pipeline] &#123; (Install dependencies)</span><br><span class="line">[Pipeline] tool</span><br><span class="line">[Pipeline] envVarsForTool</span><br><span class="line">[Pipeline] withEnv</span><br><span class="line">[Pipeline] &#123;</span><br><span class="line">[Pipeline] sh</span><br><span class="line">+ npm install</span><br><span class="line">npm WARN webserver@0.1.0 No repository field.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.6 (node_modules/fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.6: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"> </span><br><span class="line">audited 17564 packages in 18.837s</span><br><span class="line">found 7 vulnerabilities (1 moderate, 6 high)</span><br><span class="line">  run `npm audit fix` to fix them, or `npm audit` for details</span><br><span class="line">[Pipeline] &#125;</span><br><span class="line">[Pipeline] // withEnv</span><br><span class="line">[Pipeline] &#125;</span><br><span class="line">[Pipeline] // stage</span><br><span class="line">[Pipeline] stage</span><br><span class="line">[Pipeline] &#123; (Test)</span><br><span class="line">[Pipeline] tool</span><br><span class="line">[Pipeline] envVarsForTool</span><br><span class="line">[Pipeline] withEnv</span><br><span class="line">[Pipeline] &#123;</span><br><span class="line">[Pipeline] sh</span><br><span class="line">+ npm test</span><br><span class="line"> </span><br><span class="line">&gt; webserver@0.1.0 test /var/lib/jenkins/workspace/pipe1</span><br><span class="line">&gt; mocha ./test/Websocket.test.ts --exit</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  Sample route</span><br><span class="line">Server is running in process 11973 listening on PORT 1344</span><br><span class="line"> </span><br><span class="line">Parsing session from request...</span><br><span class="line">no passport</span><br><span class="line">JHnljEKqdbSt48woI0AdXGC6IAZZnU91</span><br><span class="line">open</span><br><span class="line">undefined</span><br><span class="line">&#123;&quot;trCode&quot;:42,&quot;message&quot;: &#123;&#125; &#125;</span><br><span class="line">code= &#123; trCode: 42, message: &#123;&#125; &#125;</span><br><span class="line">setStorageSock</span><br><span class="line">2019-04-24 10:53:00,528 INFO [STORAGE:NOTICE:CONTROLLER] StorageNoticeController init</span><br><span class="line">faq key= 42</span><br><span class="line">msg Cannot read property &apos;publish&apos; of undefined</span><br><span class="line">key=== 42</span><br><span class="line">&#123; networkType: 0,</span><br><span class="line">  trCode: 42,</span><br><span class="line">  result: 0,</span><br><span class="line">  message:</span><br><span class="line">   [ &#123; createDate: null, lastModifiedDate: null &#125;] &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    ✓ STORAGE Test (104ms)</span><br><span class="line">after</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  1 passing (191ms)</span><br><span class="line"> </span><br><span class="line">[Pipeline] &#125;</span><br><span class="line">[Pipeline] // withEnv</span><br><span class="line">[Pipeline] &#125;</span><br><span class="line">[Pipeline] // stage</span><br><span class="line">[Pipeline] &#125;</span><br><span class="line">[Pipeline] // withEnv</span><br><span class="line">[Pipeline] &#125;</span><br><span class="line">[Pipeline] // node</span><br><span class="line">[Pipeline] End of Pipeline</span><br><span class="line">Triggering a new build of ansible-project #2</span><br><span class="line">Finished: SUCCESS</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;git-lab-설정에서-webhook-push-Event-이후-작성-정의-pipeline&quot;&gt;&lt;a href=&quot;#git-lab-설정에서-webhook-push-Event-이후-작성-정의-pipeline&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="jenkins" scheme="https://skarlsla.github.io/tags/jenkins/"/>
    
      <category term="pipeline" scheme="https://skarlsla.github.io/tags/pipeline/"/>
    
  </entry>
  
  <entry>
    <title>[NODEJS] EXPRESS(node.js) to WebSocket 세션 공유</title>
    <link href="https://skarlsla.github.io/2019/07/11/node-express-ws/"/>
    <id>https://skarlsla.github.io/2019/07/11/node-express-ws/</id>
    <published>2019-07-11T08:30:30.000Z</published>
    <updated>2019-07-11T08:22:24.310Z</updated>
    
    <content type="html"><![CDATA[<h3 id="EXPRESS-node-js-to-WebSocket-세션-공유"><a href="#EXPRESS-node-js-to-WebSocket-세션-공유" class="headerlink" title="EXPRESS(node.js) to WebSocket 세션 공유"></a>EXPRESS(node.js) to WebSocket 세션 공유</h3><p>Express로 웹서버 생성 후  서버 및 세션정보를 WebSocket으로 전달<br>WebSocket 서버 생성 시 verifyClient 옵션으로 세션 처리</p><p><strong>server.ts</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">"body-parser"</span>;</span><br><span class="line"><span class="keyword">import</span> cors <span class="keyword">from</span> <span class="string">"cors"</span>;</span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">"express"</span>;</span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">"http"</span>;</span><br><span class="line"><span class="keyword">import</span> methodOverride <span class="keyword">from</span> <span class="string">"method-override"</span>;</span><br><span class="line"><span class="keyword">import</span> morgan <span class="keyword">from</span> <span class="string">"morgan"</span>;</span><br><span class="line"><span class="keyword">import</span> session <span class="keyword">from</span> <span class="string">"express-session"</span>;</span><br><span class="line"><span class="keyword">import</span> passport <span class="keyword">from</span> <span class="string">"passport"</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">"path"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; WS &#125; <span class="keyword">from</span> <span class="string">"./app/ws"</span>;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* private static ConnectDB(): Promise&lt;any&gt; &#123;</span></span><br><span class="line"><span class="comment">        return Connection;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    private readonly app: express.Application;</span><br><span class="line">    private readonly server: http.Server;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.app = express();</span><br><span class="line">        <span class="keyword">this</span>.server = http.createServer(<span class="keyword">this</span>.app);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> .</span><br><span class="line"> .</span><br><span class="line"> .</span><br><span class="line"> </span><br><span class="line">    private ExpressConfiguration(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="comment">// const RedisStore = connectRedis(session);</span></span><br><span class="line">        <span class="keyword">const</span> cookieOptions = &#123;</span><br><span class="line">            maxAge: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>,</span><br><span class="line">            <span class="comment">// secure:true, 브라우저가 HTTPS를 통해서만 쿠키를 전송하도록 합니다.</span></span><br><span class="line">            httpOnly: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// 쿠키가 클라이언트 JavaScript가 아닌 HTTP(S)를 통해서만 전송되도록 하며, 이를 통해 XSS(Cross-site scripting) 공격으로부터 보호할 수 있습니다.</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">const</span> sessionInfo = &#123;</span><br><span class="line">            secret: <span class="string">"sec"</span>,</span><br><span class="line">            resave: <span class="literal">true</span>,</span><br><span class="line">            saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">            cookie: cookieOptions,</span><br><span class="line">            <span class="comment">// store: new RedisStore(config.REDIS_OPTS),</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.sessionOptions = session(sessionInfo);</span><br><span class="line">        <span class="keyword">this</span>.app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;));</span><br><span class="line">        <span class="keyword">this</span>.app.use(bodyParser.json(&#123;<span class="attr">limit</span>: <span class="string">"50mb"</span>&#125;));</span><br><span class="line">        <span class="keyword">this</span>.app.use(<span class="keyword">this</span>.sessionOptions);</span><br><span class="line">        <span class="comment">/* this.app.use(session(</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                resave: true,</span></span><br><span class="line"><span class="comment">                saveUninitialized: true,</span></span><br><span class="line"><span class="comment">                secret: config.SECRET,</span></span><br><span class="line"><span class="comment">                store: new RedisStore(config.REDIS_OPTS),</span></span><br><span class="line"><span class="comment">            &#125;,</span></span><br><span class="line"><span class="comment">        )); */</span></span><br><span class="line">        <span class="keyword">this</span>.app.use(passport.initialize());</span><br><span class="line">        <span class="keyword">this</span>.app.use(passport.session());</span><br><span class="line">        <span class="keyword">this</span>.app.use(methodOverride());</span><br><span class="line">        <span class="comment">// const viewpath = path.join(__dirname, "../views");</span></span><br><span class="line">        <span class="comment">// serverService.debug(viewpath);</span></span><br><span class="line">        <span class="comment">// this.app.set("views", "./views");</span></span><br><span class="line">        <span class="keyword">this</span>.app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">        <span class="keyword">this</span>.app.set(<span class="string">"view engine"</span>, <span class="string">"ejs"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.app.use((req, res, next): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">            res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">            res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With, Content-Type, Authorization"</span>);</span><br><span class="line">            res.header(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET,PUT,PATCH,POST,DELETE,OPTIONS"</span>);</span><br><span class="line">            next();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.app.use(morgan(<span class="string">"combined"</span>));</span><br><span class="line">        <span class="keyword">this</span>.app.use(cors());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.app.use((err: any, <span class="attr">req</span>: express.Request, <span class="attr">res</span>: express.Response, <span class="attr">next</span>: express.NextFunction): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">            err.status = <span class="number">404</span>;</span><br><span class="line">            next(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private setWebSocket(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.ws = <span class="keyword">new</span> WS(<span class="keyword">this</span>.server, <span class="keyword">this</span>.sessionOptions);</span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ws.ts</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> WebSocket <span class="keyword">from</span> <span class="string">'ws'</span>;</span><br><span class="line"><span class="keyword">import</span> express, &#123; Router &#125; <span class="keyword">from</span> <span class="string">"express"</span>;</span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">"http"</span>;</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">WS</span> </span>&#123;</span><br><span class="line">    private wss: WebSocket.Server;</span><br><span class="line">    private server: http.Server;</span><br><span class="line">    private session: express.RequestHandler;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(server: http.Server, session: express.RequestHandler) &#123;</span><br><span class="line">        <span class="keyword">this</span>.server = server;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        <span class="keyword">this</span>.init(server, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private init(serve: http.Server, <span class="attr">session</span>: any) &#123;</span><br><span class="line">        <span class="keyword">this</span>.wss = <span class="keyword">new</span> WebSocket.Server(&#123;</span><br><span class="line">            </span><br><span class="line">            verifyClient:<span class="function">(<span class="params">info: &#123;origin: string; secure: boolean; req: any &#125;, done</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Parsing session from request...'</span>);</span><br><span class="line">                session(info.req,( )=&gt;&#123;&#125;, ()=&gt;&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.isSessionPassport(info.req))&#123;</span><br><span class="line">                        done(info.req.session);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">// done(false,401,'unathorized');</span></span><br><span class="line">                        done(<span class="literal">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">console</span>.log(info.req.session.id);</span><br><span class="line"></span><br><span class="line">                &#125;)                </span><br><span class="line">            &#125;, <span class="attr">server</span>: serve </span><br><span class="line">            , <span class="attr">path</span>: <span class="string">"/"</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/* this.pushController = new PushController(this.wss);</span></span><br><span class="line"><span class="comment">        this.pushController.startPush(); */</span></span><br><span class="line">        <span class="keyword">this</span>.connection();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private connection()&#123;</span><br><span class="line">        <span class="keyword">this</span>.wss.on(<span class="string">"connection"</span>,(ws: WebSocket) =&gt; &#123;</span><br><span class="line">            <span class="comment">// this.pushController.broadcastPush("100" , "msg");</span></span><br><span class="line">            ws.on(<span class="string">"message"</span>, (msg: string) =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(msg);                 </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private isSessionPassport(req: express.Request)&#123;</span><br><span class="line">        <span class="keyword">if</span>(req.session.passport &amp;&amp; req.session.passport.user)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(req.session.passport.user);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"no passport"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;EXPRESS-node-js-to-WebSocket-세션-공유&quot;&gt;&lt;a href=&quot;#EXPRESS-node-js-to-WebSocket-세션-공유&quot; class=&quot;headerlink&quot; title=&quot;EXPRESS(node.js) to WebS
      
    
    </summary>
    
      <category term="NODEJS" scheme="https://skarlsla.github.io/categories/NODEJS/"/>
    
    
      <category term="NODEJS" scheme="https://skarlsla.github.io/tags/NODEJS/"/>
    
      <category term="EXPRESS" scheme="https://skarlsla.github.io/tags/EXPRESS/"/>
    
      <category term="WebSocket" scheme="https://skarlsla.github.io/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>[TYPESCRIPT] 타입스크립트 디자인 패턴 - Singleton</title>
    <link href="https://skarlsla.github.io/2019/07/11/pattern/"/>
    <id>https://skarlsla.github.io/2019/07/11/pattern/</id>
    <published>2019-07-11T07:24:30.000Z</published>
    <updated>2019-07-11T07:34:26.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="Singleton Pattern"></a>Singleton Pattern</h3><p>The singleton pattern is a creational software design pattern.</p><p>클래스가 단 하나의 인스턴스 만 갖도록 보장한다.</p><p><strong>이점</strong></p><ol><li>하나의 인스턴스만 할당함으로 메모리낭비 방지.</li><li>하나의 프로세스에서 공유자원 접근시 이점</li><li>db커넥션풀, 로그 등에 사용됨.</li></ol><p><strong>단점</strong></p><ol><li>멀티 프로세스 상황에서 인스턴스공유 이슈 생길수있음</li><li>하나의 인스턴스로 많은 작업을 하게될 경우 문제</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123; </span><br><span class="line">    private <span class="keyword">static</span> instance: Singleton; </span><br><span class="line">    private _temperature: number; </span><br><span class="line">    private <span class="keyword">constructor</span>() &#123; &#125; </span><br><span class="line">    <span class="keyword">static</span> getInstance() &#123; </span><br><span class="line">        <span class="keyword">if</span> (!Singleton.instance) &#123; </span><br><span class="line">            Singleton.instance = <span class="keyword">new</span> Singleton(); </span><br><span class="line">            Singleton.instance._temperature = <span class="number">0</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        <span class="keyword">return</span> Singleton.instance; </span><br><span class="line">    &#125; </span><br><span class="line">    get temperature(): number &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._temperature; </span><br><span class="line">    &#125; </span><br><span class="line">    set temperature(score) &#123; </span><br><span class="line">        <span class="keyword">this</span>._temperature = score; </span><br><span class="line">    &#125; </span><br><span class="line">    increaseTemperature(): number &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._temperature += <span class="number">1</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    decreaseTemperature(): number &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._temperature -= <span class="number">1</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> myInstance = Singleton.getInstance(); </span><br><span class="line"><span class="keyword">const</span> myInstance2 = Singleton.getInstance(); </span><br><span class="line"><span class="built_in">console</span>.log(myInstance === myInstance2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Singleton-Pattern&quot;&gt;&lt;a href=&quot;#Singleton-Pattern&quot; class=&quot;headerlink&quot; title=&quot;Singleton Pattern&quot;&gt;&lt;/a&gt;Singleton Pattern&lt;/h3&gt;&lt;p&gt;The single
      
    
    </summary>
    
      <category term="patterns" scheme="https://skarlsla.github.io/categories/patterns/"/>
    
    
      <category term="typescript" scheme="https://skarlsla.github.io/tags/typescript/"/>
    
      <category term="singleton" scheme="https://skarlsla.github.io/tags/singleton/"/>
    
      <category term="pattern" scheme="https://skarlsla.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>[NODEJS] TypeScript with Node.js </title>
    <link href="https://skarlsla.github.io/2019/07/10/node-with-type/"/>
    <id>https://skarlsla.github.io/2019/07/10/node-with-type/</id>
    <published>2019-07-10T11:40:30.000Z</published>
    <updated>2019-07-11T08:38:19.173Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NODEJS-TypeScript-with-Node-js"><a href="#NODEJS-TypeScript-with-Node-js" class="headerlink" title="[NODEJS] TypeScript with Node.js ?"></a>[NODEJS] TypeScript with Node.js ?</h3><ol><li><p>프로젝트 폴더 생성 </p></li><li><p>init</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li><li><p>타입스크립트 설치</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure></li><li><p>타입설정 초기화</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc — init</span><br></pre></td></tr></table></figure></li><li><p>tsconfig.json 수정</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="comment">/* Basic Options */</span></span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,                          <span class="comment">/* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */</span></span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span>,                     <span class="comment">/* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */</span></span><br><span class="line">    <span class="string">"outDir"</span>: <span class="string">"./dist"</span>,                        <span class="comment">/* Redirect output structure to the directory. */</span></span><br><span class="line">    <span class="string">"strict"</span>: <span class="literal">true</span>,                           <span class="comment">/* Enable all strict type-checking options. */</span></span><br><span class="line">    <span class="string">"esModuleInterop"</span>: <span class="literal">true</span>                   <span class="comment">/* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */</span></span><br><span class="line">​</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"include"</span>: [</span><br><span class="line">    <span class="string">"./src/**/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​</p><ol start="6"><li><p>폴더생성 ./src ./dist</p></li><li><p>.src/test.ts 작성</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    private hello: <span class="built_in">String</span> = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(private name: String) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hello = name + <span class="string">" Hello~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public getHello(): <span class="built_in">String</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hello;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person: Person = <span class="keyword">new</span> Person(<span class="string">"namgi"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.getHello());</span><br></pre></td></tr></table></figure></li><li><p>tsc 컴파일</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc</span><br></pre></td></tr></table></figure></li><li><p>js 파일 실행</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node ./dist/test.js</span><br></pre></td></tr></table></figure></li><li><p>결과물 확인<br><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FNqjy6%2FbtqwyOUXEz4%2F9fO6Y00sqZWNDucdOqzfA0%2Fimg.png" alt="결과"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NODEJS-TypeScript-with-Node-js&quot;&gt;&lt;a href=&quot;#NODEJS-TypeScript-with-Node-js&quot; class=&quot;headerlink&quot; title=&quot;[NODEJS] TypeScript with Node.js
      
    
    </summary>
    
      <category term="NODEJS" scheme="https://skarlsla.github.io/categories/NODEJS/"/>
    
    
      <category term="NODEJS" scheme="https://skarlsla.github.io/tags/NODEJS/"/>
    
      <category term="타입스크립트" scheme="https://skarlsla.github.io/tags/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="typescript" scheme="https://skarlsla.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>[NODEJS] 타입스크립트(typescript) ?</title>
    <link href="https://skarlsla.github.io/2019/07/10/node-type/"/>
    <id>https://skarlsla.github.io/2019/07/10/node-type/</id>
    <published>2019-07-10T08:40:30.000Z</published>
    <updated>2019-07-11T08:27:21.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NODEJS-타입스크립트-typescript"><a href="#NODEJS-타입스크립트-typescript" class="headerlink" title="[NODEJS] 타입스크립트(typescript) ?"></a>[NODEJS] 타입스크립트(typescript) ?</h3><p>TypeScript는 마이크로소프트에서 2012년 발표한 오픈소스라고 한다.</p><p>정적 타이핑을 지원하며 ES6(ECMAScript 2015)의 클래스, 모듈 등과 ES7의 Decorator 등을 지원한다.</p><p>ES6의 새로운 기능들을 사용하기 위해 Babel과 같은 별도 트랜스파일러(Transpiler)를 사용하지 않아도 ES6의 새로운 기능을 기존의 자바스크립트 엔진(현재의 브라우저 또는 Node.js)에서 실행할 수 있다.</p><p><strong><em>특징?</em></strong></p><p>이름에서 알수 있듯이 모든 변수나 반환값에 타입을 지정해야한다. 미리 에러를 알 수 있겠다.</p><p>“TypeScript는 정적 타입을 지원하므로 컴파일 단계에서 오류를 포착할 수 있는 장점이 있다. 명시적인 정적 타입 지정은 개발자의 의도를 명확하게 코드로 기술할 수 있다. 이는 코드의 가독성을 높이고 예측할 수 있게 하며 디버깅을 쉽게 한다.”  라고한다.</p><p>인터페이스나 제네릭과 같은 객체지향 프로그래밍을 지원한다.  자바나 C#개발자들이 자바스크립트 프로젝트를 개발하는데 도움을 줄수있겠다.</p><p><strong><em>사용법?</em></strong></p><p>npm install -g typescript  설치 후</p><p>.ts로 작성후 tsc 명령어로 컴파일하면 .js 파일로 떨궈준다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NODEJS-타입스크립트-typescript&quot;&gt;&lt;a href=&quot;#NODEJS-타입스크립트-typescript&quot; class=&quot;headerlink&quot; title=&quot;[NODEJS] 타입스크립트(typescript) ?&quot;&gt;&lt;/a&gt;[NODEJS] 
      
    
    </summary>
    
      <category term="NODEJS" scheme="https://skarlsla.github.io/categories/NODEJS/"/>
    
    
      <category term="NODEJS" scheme="https://skarlsla.github.io/tags/NODEJS/"/>
    
      <category term="타입스크립트" scheme="https://skarlsla.github.io/tags/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="typescript" scheme="https://skarlsla.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>[ANSIBLE] - PLAYBOOK WITH WEBSERVER</title>
    <link href="https://skarlsla.github.io/2019/05/09/ANSIBLE-PLAYBOOK-WITH-WEBSERVER/"/>
    <id>https://skarlsla.github.io/2019/05/09/ANSIBLE-PLAYBOOK-WITH-WEBSERVER/</id>
    <published>2019-05-09T07:27:15.000Z</published>
    <updated>2019-07-15T09:00:28.836Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="playbook-구조"><a href="#playbook-구조" class="headerlink" title="playbook 구조"></a>playbook 구조</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/playbook_structure.png" alt="작동 싸이클"></p><hr><h3 id="webserver-yml"><a href="#webserver-yml" class="headerlink" title="webserver.yml"></a>webserver.yml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  remote_user: root</span><br><span class="line">  become: no</span><br><span class="line">  vars:</span><br><span class="line">    git_user : nkyoon@xxx.com</span><br><span class="line">    git_password :</span><br><span class="line">    webapp_name: webserver</span><br><span class="line">    webapp_path: /home/WebServer</span><br><span class="line">  roles:</span><br><span class="line">    - yum_packages</span><br><span class="line">    - app.source</span><br></pre></td></tr></table></figure><hr><h3 id="yum-packages-tasks-main-yml"><a href="#yum-packages-tasks-main-yml" class="headerlink" title="yum_packages/tasks/main.yml"></a>yum_packages/tasks/main.yml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- name: nodejs repo</span><br><span class="line">  shell: <span class="string">"curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -"</span></span><br><span class="line"> </span><br><span class="line">- name: <span class="string">"Installing PKG"</span></span><br><span class="line">  yum:</span><br><span class="line">    state: present</span><br><span class="line">    name:</span><br><span class="line">      - git</span><br><span class="line">      - gcc-c++</span><br><span class="line">      - make</span><br><span class="line">      - nodejs</span><br><span class="line"> </span><br><span class="line">- name: install pm2</span><br><span class="line">  npm: name=pm2 global=<span class="literal">true</span> production=<span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h3 id="app-source-tasks-main-yml"><a href="#app-source-tasks-main-yml" class="headerlink" title="app.source/tasks/main.yml"></a>app.source/tasks/main.yml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- name: pull from git</span><br><span class="line">  git:</span><br><span class="line">    repo: https://&#123;&#123; git_user | urlencode &#125;&#125;:&#123;&#123; git_password | urlencode &#125;&#125;@git.xxxxx.com/xxx/WebServer.git</span><br><span class="line">    dest: <span class="string">"&#123;&#123; webapp_path &#125;&#125;"</span></span><br><span class="line">    update: yes</span><br><span class="line">    force: yes</span><br><span class="line">    version: develop</span><br><span class="line"> </span><br><span class="line"><span class="comment">## npm 의존성 모듈을 설치</span></span><br><span class="line">- name: install dependencies</span><br><span class="line">  shell: <span class="string">"cd &#123;&#123; webapp_path &#125;&#125; &amp;&amp; npm install "</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">## npm build  -&gt; dist</span></span><br><span class="line">- name: npm build</span><br><span class="line">  shell: <span class="string">"cd &#123;&#123; webapp_path &#125;&#125; &amp;&amp; npm run-script build"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">## 앱의 설치 상태를 확인</span></span><br><span class="line">- name: check <span class="keyword">for</span> webapp</span><br><span class="line">  shell: <span class="string">"pm2 show &#123;&#123; webapp_name &#125;&#125;"</span></span><br><span class="line">  register: webapp_result</span><br><span class="line">  ignore_errors: <span class="literal">true</span></span><br><span class="line">  become: <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">## 기존의 앱을 종료</span></span><br><span class="line">- name: stop webapp</span><br><span class="line">  shell: <span class="string">"pm2 stop &#123;&#123; webapp_name &#125;&#125;"</span></span><br><span class="line">  when: <span class="string">"webapp_status.rc == 0"</span></span><br><span class="line">  ignore_errors: <span class="literal">true</span></span><br><span class="line">  become: <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">## 앱 실행</span></span><br><span class="line">- name: start webapp</span><br><span class="line">  shell: <span class="string">"cd &#123;&#123; webapp_path &#125;&#125; &amp;&amp; pm2 start pm2-config.json"</span></span><br><span class="line">  become: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h3 id="배포-테스트"><a href="#배포-테스트" class="headerlink" title="배포 테스트"></a>배포 테스트</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@tcid ansible]<span class="comment"># ansible-playbook webserver.yml</span></span><br><span class="line">PLAY [webservers] ******************************************************************************************************************************************************************************************</span><br><span class="line"> </span><br><span class="line">TASK [Gathering Facts] *************************************************************************************************************************************************************************************</span><br><span class="line">ok: [xxx.xxx.xxx.xxx]</span><br><span class="line"> </span><br><span class="line">TASK [yum_packages : nodejs repo] **************************************************************************************************************************************************************************</span><br><span class="line"> [WARNING]: Consider using the get_url or uri module rather than running <span class="string">'curl'</span>.  If you need to use <span class="built_in">command</span> because get_url or uri is insufficient you can add <span class="string">'warn: false'</span> to this <span class="built_in">command</span> task or <span class="built_in">set</span></span><br><span class="line"><span class="string">'command_warnings=False'</span> <span class="keyword">in</span> ansible.cfg to get rid of this message.</span><br><span class="line"> </span><br><span class="line">changed: [xxx.xxx.xxx.xxx]</span><br><span class="line"> </span><br><span class="line">TASK [yum_packages : Installing PKG] ***********************************************************************************************************************************************************************</span><br><span class="line">ok: [xxx.xxx.xxx.xxx]</span><br><span class="line"> </span><br><span class="line">TASK [yum_packages : install pm2] **************************************************************************************************************************************************************************</span><br><span class="line">ok: [xxx.xxx.xxx.xxx]</span><br><span class="line"> </span><br><span class="line">TASK [app.source : pull from git] **************************************************************************************************************************************************************************</span><br><span class="line">changed: [xxx.xxx.xxx.xxx]</span><br><span class="line"> </span><br><span class="line">TASK [app.source : install dependencies] *******************************************************************************************************************************************************************</span><br><span class="line">changed: [xxx.xxx.xxx.xxx]</span><br><span class="line"> </span><br><span class="line">TASK [app.source : npm build] ******************************************************************************************************************************************************************************</span><br><span class="line"> </span><br><span class="line">TASK [app.source : check <span class="keyword">for</span> webapp] ***********************************************************************************************************************************************************************</span><br><span class="line">changed: [xxx.xxx.xxx.xxx]</span><br><span class="line"> </span><br><span class="line">TASK [app.source : stop webapp] ****************************************************************************************************************************************************************************</span><br><span class="line">fatal: [xxx.xxx.xxx.xxx]: FAILED! =&gt; &#123;<span class="string">"msg"</span>: <span class="string">"The conditional check 'webapp_status.rc == 0' failed. The error was: error while evaluating conditional (webapp_status.rc == 0): 'webapp_status' is undefined\n\nThe error appears to have been in '/etc/ansible/roles/app.source/tasks/main.yml': line 25, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n## 기존의 앱을 종료\n- name: stop webapp\n  ^ here\n"</span>&#125;</span><br><span class="line">...ignoring</span><br><span class="line"> </span><br><span class="line">TASK [app.source : start webapp] ***************************************************************************************************************************************************************************</span><br><span class="line">changed: [xxx.xxx.xxx.xxx]</span><br><span class="line"> </span><br><span class="line">PLAY RECAP *************************************************************************************************************************************************************************************************</span><br><span class="line">xxx.xxx.xxx.xxx            : ok=10   changed=6    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;playbook-구조&quot;&gt;&lt;a href=&quot;#playbook-구조&quot; class=&quot;headerlink&quot; title=&quot;playbook 구조&quot;&gt;&lt;/a&gt;playbook 구조&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubu
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="배포" scheme="https://skarlsla.github.io/tags/%EB%B0%B0%ED%8F%AC/"/>
    
      <category term="CD" scheme="https://skarlsla.github.io/tags/CD/"/>
    
  </entry>
  
  <entry>
    <title>[ANSIBLE] - PLAYBOOK 작성</title>
    <link href="https://skarlsla.github.io/2019/05/09/ANSIBLE-PLAYBOOK-%EC%9E%91%EC%84%B1/"/>
    <id>https://skarlsla.github.io/2019/05/09/ANSIBLE-PLAYBOOK-작성/</id>
    <published>2019-05-09T07:23:03.000Z</published>
    <updated>2019-07-15T09:00:04.732Z</updated>
    
    <content type="html"><![CDATA[<p>playbook :<br>설정파일(YAML)에 미리 정의하여 원격 노드서버의 구성 및 배포를 관리 할수있다. </p><hr><p>example<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: webservers   <span class="comment"># /etc/ansible/hosts에 정의된 [webservers] 그룹</span></span><br><span class="line">  vars:</span><br><span class="line">    http_port: 80    </span><br><span class="line">    max_clients: 200</span><br><span class="line">  remote_user: root   <span class="comment"># 작업유저</span></span><br><span class="line">  tasks:  <span class="comment"># 작업리스트</span></span><br><span class="line">  - name: ensure apache is at the latest version</span><br><span class="line">    yum:  <span class="comment"># 패키지 설치</span></span><br><span class="line">      name: httpd</span><br><span class="line">      state: latest</span><br><span class="line">  - name: write the apache config file</span><br><span class="line">    template: <span class="comment"># 파일 복사</span></span><br><span class="line">      src: /srv/httpd.j2</span><br><span class="line">      dest: /etc/httpd.conf</span><br><span class="line">    notify: <span class="comment"># handlers 노티</span></span><br><span class="line">    - restart apache</span><br><span class="line">  - name: ensure apache is running</span><br><span class="line">    service: <span class="comment">#서비스 실행</span></span><br><span class="line">      name: httpd</span><br><span class="line">      state: started</span><br><span class="line">  handlers: <span class="comment"># 노티를 listen</span></span><br><span class="line">    - name: restart apache</span><br><span class="line">      service:</span><br><span class="line">        name: httpd</span><br><span class="line">        state: restarted</span><br></pre></td></tr></table></figure></p><p>작성된 playbook 실행<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook playbook.yml -f 10 <span class="comment"># 병렬처리 레벨 10</span></span><br></pre></td></tr></table></figure></p><p>팁 명령어 옵션  –syntax-check  flag<br>에러 체크해쥼</p><p>ansible-playbook playbook.yml –list-hosts # host 목록확인</p><p>참고: <a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/user_guide/playbooks.html</a><br>playbook 문법: <a href="https://taesany.tistory.com/139" target="_blank" rel="noopener">https://taesany.tistory.com/139</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;playbook :&lt;br&gt;설정파일(YAML)에 미리 정의하여 원격 노드서버의 구성 및 배포를 관리 할수있다. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;example&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="배포" scheme="https://skarlsla.github.io/tags/%EB%B0%B0%ED%8F%AC/"/>
    
      <category term="CD" scheme="https://skarlsla.github.io/tags/CD/"/>
    
  </entry>
  
  <entry>
    <title>[JENKINS] - ANSIBLE 연동</title>
    <link href="https://skarlsla.github.io/2019/05/08/JENKINS-ANSIBLE-%EC%97%B0%EB%8F%99/"/>
    <id>https://skarlsla.github.io/2019/05/08/JENKINS-ANSIBLE-연동/</id>
    <published>2019-05-08T03:25:42.000Z</published>
    <updated>2019-07-15T09:01:31.031Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-플러그인-설치-ansible-plugin"><a href="#1-플러그인-설치-ansible-plugin" class="headerlink" title="1. 플러그인 설치 ansible plugin"></a>1. 플러그인 설치 ansible plugin</h3><hr><h3 id="2-Global-Tool-Config"><a href="#2-Global-Tool-Config" class="headerlink" title="2. Global Tool Config"></a>2. Global Tool Config</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-19_11-26-29.png" alt="Alt text"></p><hr><h3 id="3-Credential-추가-system-global-credentials"><a href="#3-Credential-추가-system-global-credentials" class="headerlink" title="3. Credential 추가 - system - global credentials"></a>3. Credential 추가 - system - global credentials</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-19_11-27-52.png" alt="Alt text"></p><hr><h3 id="4-빌드-추가-invoke-ansible-ad-hoc-command"><a href="#4-빌드-추가-invoke-ansible-ad-hoc-command" class="headerlink" title="4. 빌드 추가  invoke ansible ad-hoc command"></a>4. 빌드 추가  invoke ansible ad-hoc command</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-19_11-29-28.png" alt="Alt text"></p><hr><h3 id="5-credential-등록을-했음에도-에러가-난다…"><a href="#5-credential-등록을-했음에도-에러가-난다…" class="headerlink" title="5. credential 등록을 했음에도  에러가 난다…"></a>5. credential 등록을 했음에도  에러가 난다…</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-19_11-30-37.png" alt="Alt text"></p><hr><h3 id="6-jenkins-권한으로도-ssh-key를-등록해야한다"><a href="#6-jenkins-권한으로도-ssh-key를-등록해야한다" class="headerlink" title="6.  jenkins 권한으로도  ssh key를 등록해야한다."></a>6.  jenkins 권한으로도  ssh key를 등록해야한다.</h3><p>root에서는 ansible all -a “ls” 명령이 잘된다.</p><p>jenkins로 변경 후 테스트<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su -s /bin/bash jenkins</span><br><span class="line">xxx.xxx.xxx.xxx | UNREACHABLE! =&gt; &#123;</span><br><span class="line"><span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line"><span class="string">"msg"</span>: <span class="string">"Failed to connect to the host via ssh: Warning: Permanently added 'xxx.xxx.xxx.xxx' (ECDSA) to the list of known hosts.\r\nPermission denied (publickey,gssapi-keyex,gssapi-with-mic,password)."</span>, </span><br><span class="line"><span class="string">"unreachable"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ssh 위치는  /var/lib/jenkins/.ssh</p><p>root .ssh/ 파일들을 복사해준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ansible all -a <span class="string">"ls"</span> </span><br><span class="line"></span><br><span class="line">xxx.xxx.xxx.xxx | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">1</span><br><span class="line">cx</span><br><span class="line">node-v10.13.0</span><br><span class="line">node-v10.13.0-linux-x64</span><br><span class="line">node-v10.13.0-linux-x64.tar</span><br><span class="line">node-v10.13.0.tar.gz</span><br><span class="line">remi-release-7.5-2.el7.remi.noarch.rpm</span><br><span class="line">zabbix-agent-3.4.11-1.el7.x86_64.rpm</span><br><span class="line">zabbix-tcp-master</span><br><span class="line">Finished: SUCCESS</span><br></pre></td></tr></table></figure><hr><h3 id="7-최종-빌드-테스트"><a href="#7-최종-빌드-테스트" class="headerlink" title="7. 최종 빌드 테스트"></a>7. 최종 빌드 테스트</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-19_11-37-23.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-플러그인-설치-ansible-plugin&quot;&gt;&lt;a href=&quot;#1-플러그인-설치-ansible-plugin&quot; class=&quot;headerlink&quot; title=&quot;1. 플러그인 설치 ansible plugin&quot;&gt;&lt;/a&gt;1. 플러그인 
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="ci" scheme="https://skarlsla.github.io/tags/ci/"/>
    
      <category term="jenkins" scheme="https://skarlsla.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>[ANSIBLE] Ad-Hoc</title>
    <link href="https://skarlsla.github.io/2019/05/08/ANSIBLE-Ad-Hoc/"/>
    <id>https://skarlsla.github.io/2019/05/08/ANSIBLE-Ad-Hoc/</id>
    <published>2019-05-08T03:18:17.000Z</published>
    <updated>2019-07-15T09:21:24.521Z</updated>
    
    <content type="html"><![CDATA[<p>커맨드 명령으로 원격지 /etc/ansible/hosts 에 정의된 서버노드들에 대해 명령을 보낸다.</p><hr><h3 id="EXAMPLE"><a href="#EXAMPLE" class="headerlink" title="EXAMPLE"></a>EXAMPLE</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible webservers -a <span class="string">"ls -al"</span></span><br></pre></td></tr></table></figure><p>파일전송<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible webservers -m file -a <span class="string">"dest=/path/to/c mode=755 owner=mdehaan group=mdehaan state=directory"</span></span><br></pre></td></tr></table></figure></p><p>yum 설치<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible webservers -m yum -a <span class="string">"name=acme state=absent"</span></span><br></pre></td></tr></table></figure></p><p>GIT 명령<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible webservers -m git -a <span class="string">"repo=https://foo.example.org/repo.git dest=/srv/myapp version=HEAD"</span></span><br></pre></td></tr></table></figure></p><p>서비스 관리<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible webservers -m service -a <span class="string">"name=httpd state=restarted"</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;커맨드 명령으로 원격지 /etc/ansible/hosts 에 정의된 서버노드들에 대해 명령을 보낸다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;EXAMPLE&quot;&gt;&lt;a href=&quot;#EXAMPLE&quot; class=&quot;headerlink&quot; title=&quot;EXAMPLE&quot;&gt;
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="배포" scheme="https://skarlsla.github.io/tags/%EB%B0%B0%ED%8F%AC/"/>
    
      <category term="cd" scheme="https://skarlsla.github.io/tags/cd/"/>
    
  </entry>
  
  <entry>
    <title>[ANSIBLE] NODE 등록 </title>
    <link href="https://skarlsla.github.io/2019/05/08/ANSIBLE-NODE-%EB%93%B1%EB%A1%9D/"/>
    <id>https://skarlsla.github.io/2019/05/08/ANSIBLE-NODE-등록/</id>
    <published>2019-05-08T03:01:26.000Z</published>
    <updated>2019-07-15T08:59:27.939Z</updated>
    
    <content type="html"><![CDATA[<p>Ansible은 모든 target node 작업을 ssh 기반으로 접근하여 처리한다.</p><p>타 시스템으로 접근하여 작업을 하기 위해 ID/PASS 없이 암호화된 키를 전달하여 상호 인증하는 환경을 구성해야 한다.</p><hr><h3 id="1-Ansible-Hosts-파일에-노드-등록"><a href="#1-Ansible-Hosts-파일에-노드-등록" class="headerlink" title="1. Ansible Hosts 파일에 노드 등록"></a>1. Ansible Hosts 파일에 노드 등록</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ansible/hosts</span><br><span class="line"></span><br><span class="line">[webservers]</span><br><span class="line">xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><hr><h3 id="2-SSH-Key-생성"><a href="#2-SSH-Key-생성" class="headerlink" title="2. SSH Key 생성"></a>2. SSH Key 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"nkyoon@xxx.com"</span></span><br><span class="line"><span class="built_in">cd</span> ./.ssh/</span><br><span class="line">cp id_rsa.pub authorized_keys</span><br></pre></td></tr></table></figure><hr><h3 id="3-SSH-Key-NODE로-복사"><a href="#3-SSH-Key-NODE로-복사" class="headerlink" title="3. SSH Key NODE로 복사"></a>3. SSH Key NODE로 복사</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh root@web01 <span class="string">"mkdir ./.ssh;chmod 700 ./.ssh"</span></span><br><span class="line">scp authorized_keys root@01:~/.ssh/authorized_keys </span><br><span class="line"></span><br><span class="line">ansible webservers -m ping  <span class="comment">#테스트</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ansible은 모든 target node 작업을 ssh 기반으로 접근하여 처리한다.&lt;/p&gt;
&lt;p&gt;타 시스템으로 접근하여 작업을 하기 위해 ID/PASS 없이 암호화된 키를 전달하여 상호 인증하는 환경을 구성해야 한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="배포" scheme="https://skarlsla.github.io/tags/%EB%B0%B0%ED%8F%AC/"/>
    
      <category term="cd" scheme="https://skarlsla.github.io/tags/cd/"/>
    
  </entry>
  
  <entry>
    <title>[JENKINS] GitLab 연동 및 빌드 테스트</title>
    <link href="https://skarlsla.github.io/2019/05/08/GitLab-%EC%97%B0%EB%8F%99-%EB%B0%8F-%EB%B9%8C%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    <id>https://skarlsla.github.io/2019/05/08/GitLab-연동-및-빌드-테스트/</id>
    <published>2019-05-08T02:43:15.000Z</published>
    <updated>2019-07-15T09:01:13.652Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-소스-코드-관리"><a href="#1-소스-코드-관리" class="headerlink" title="1. 소스 코드 관리"></a>1. 소스 코드 관리</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-16_18-2-36.png" alt="Alt text"></p><hr><h3 id="2-URL-연결시-ssl-이슈"><a href="#2-URL-연결시-ssl-이슈" class="headerlink" title="2. URL 연결시  ssl 이슈"></a>2. URL 연결시  ssl 이슈</h3><p>jenkins 관리 - 시스템설정 - 환경변수 추가</p><p>GIT_SSL_NO_VERIFY , true</p><hr><h3 id="3-빌드유발-웹훅-주소-획득"><a href="#3-빌드유발-웹훅-주소-획득" class="headerlink" title="3. 빌드유발 - 웹훅 주소 획득"></a>3. 빌드유발 - 웹훅 주소 획득</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/jenkins_build.png" alt="Alt text"></p><hr><h3 id="4-gitlab-프로젝트-설정-integrations"><a href="#4-gitlab-프로젝트-설정-integrations" class="headerlink" title="4. gitlab - 프로젝트 - 설정- integrations"></a>4. gitlab - 프로젝트 - 설정- integrations</h3><p>웹훅 url 입력 <a href="http://jenkins.xxx.com:9090/project/gitlab-devops-test" target="_blank" rel="noopener">http://jenkins.xxx.com:9090/project/gitlab-devops-test</a></p><p>푸쉬 이벤트시 빌드 유발</p><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-16_18-6-29.png" alt="Alt text"></p><hr><h3 id="5-웹훅-처리를-위한-아웃바운드-허용-ADMIN-설정"><a href="#5-웹훅-처리를-위한-아웃바운드-허용-ADMIN-설정" class="headerlink" title="5. 웹훅 처리를 위한 아웃바운드 허용 -  ADMIN- 설정"></a>5. 웹훅 처리를 위한 아웃바운드 허용 -  ADMIN- 설정</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-16_18-9-50.png" alt="Alt text"></p><hr><h3 id="6-빌드-시-작업-테스트"><a href="#6-빌드-시-작업-테스트" class="headerlink" title="6.  빌드 시 작업 테스트"></a>6.  빌드 시 작업 테스트</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-16_18-8-40.png" alt="Alt text"></p><hr><h3 id="7-푸쉬-이벤트-발생시-젠킨스-빌드"><a href="#7-푸쉬-이벤트-발생시-젠킨스-빌드" class="headerlink" title="7. 푸쉬 이벤트 발생시  젠킨스 빌드"></a>7. 푸쉬 이벤트 발생시  젠킨스 빌드</h3><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/image2019-4-16_18-7-37.png" alt="Alt text"></p><p>참고: <a href="http://egloos.zum.com/mcchae/v/11246199" target="_blank" rel="noopener">http://egloos.zum.com/mcchae/v/11246199</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-소스-코드-관리&quot;&gt;&lt;a href=&quot;#1-소스-코드-관리&quot; class=&quot;headerlink&quot; title=&quot;1. 소스 코드 관리&quot;&gt;&lt;/a&gt;1. 소스 코드 관리&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubuse
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="jenkins" scheme="https://skarlsla.github.io/tags/jenkins/"/>
    
      <category term="gitlab" scheme="https://skarlsla.github.io/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>배포 자동화(CI/CD) AutoMation Architecture</title>
    <link href="https://skarlsla.github.io/2019/04/29/devops-auto/"/>
    <id>https://skarlsla.github.io/2019/04/29/devops-auto/</id>
    <published>2019-04-29T08:50:24.000Z</published>
    <updated>2019-07-16T02:43:39.557Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="CI-CD-Automation-Architecture"><a href="#CI-CD-Automation-Architecture" class="headerlink" title="CI/CD Automation Architecture"></a>CI/CD Automation Architecture</h3><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbiGalK%2Fbtqwx3ZB462%2FyzteEkSKW4kIghd9KVp5W1%2Fimg.jpg" alt="GITLAB-JENKINS-ANSIBLE"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;CI-CD-Automation-Architecture&quot;&gt;&lt;a href=&quot;#CI-CD-Automation-Architecture&quot; class=&quot;headerlink&quot; title=&quot;CI/CD Automation Architecture
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="CD" scheme="https://skarlsla.github.io/tags/CD/"/>
    
      <category term="devops" scheme="https://skarlsla.github.io/tags/devops/"/>
    
      <category term="CI/CD" scheme="https://skarlsla.github.io/tags/CI-CD/"/>
    
      <category term="CI" scheme="https://skarlsla.github.io/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>[ANSIBLE] 설치 및 설정 for centos</title>
    <link href="https://skarlsla.github.io/2019/04/29/ANSIBLE-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95/"/>
    <id>https://skarlsla.github.io/2019/04/29/ANSIBLE-설치-및-설정/</id>
    <published>2019-04-29T08:23:56.000Z</published>
    <updated>2019-07-15T09:00:14.795Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-ANSIBLE-설치"><a href="#1-ANSIBLE-설치" class="headerlink" title="1. ANSIBLE 설치"></a>1. ANSIBLE 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">yum -y install ansible</span><br></pre></td></tr></table></figure><hr><h3 id="2-ANSIBLE-타워설치"><a href="#2-ANSIBLE-타워설치" class="headerlink" title="2. ANSIBLE 타워설치"></a>2. ANSIBLE 타워설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz</span><br><span class="line">tar xvfz ansible-tower-setup-latest.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ansible-tower-setup-3.4.3-1/</span><br><span class="line">vi inventory   <span class="comment">#설정파일</span></span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><hr><h3 id="3-접속확인"><a href="#3-접속확인" class="headerlink" title="3. 접속확인"></a>3. 접속확인</h3><p>https://[serverIP]:80<br>admin / password(inventory에서 설정한 pw)</p><hr><h3 id="4-비밀번호-변경"><a href="#4-비밀번호-변경" class="headerlink" title="4. 비밀번호 변경"></a>4. 비밀번호 변경</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@tcid]<span class="comment"># tower-manage  changepassword admin</span></span><br><span class="line"></span><br><span class="line">Changing password <span class="keyword">for</span> user <span class="string">'admin'</span></span><br><span class="line">Password:</span><br><span class="line">Password (again):</span><br><span class="line">Password changed successfully <span class="keyword">for</span> user <span class="string">'admin'</span></span><br><span class="line">You have new mail <span class="keyword">in</span> /var/spool/mail/root</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-ANSIBLE-설치&quot;&gt;&lt;a href=&quot;#1-ANSIBLE-설치&quot; class=&quot;headerlink&quot; title=&quot;1. ANSIBLE 설치&quot;&gt;&lt;/a&gt;1. ANSIBLE 설치&lt;/h3&gt;&lt;figure class=&quot;highlight b
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="배포" scheme="https://skarlsla.github.io/tags/%EB%B0%B0%ED%8F%AC/"/>
    
      <category term="cd" scheme="https://skarlsla.github.io/tags/cd/"/>
    
  </entry>
  
  <entry>
    <title>[JENKINS] 젠킨스 설치 및 설정 for centos</title>
    <link href="https://skarlsla.github.io/2019/04/29/%EC%A0%A0%ED%82%A8%EC%8A%A4-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95/"/>
    <id>https://skarlsla.github.io/2019/04/29/젠킨스-설치-및-설정/</id>
    <published>2019-04-29T08:21:03.000Z</published>
    <updated>2019-07-15T08:59:49.881Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-자바설치"><a href="#1-자바설치" class="headerlink" title="1. 자바설치"></a>1. 자바설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum list java*jdk-devel</span><br><span class="line">yum install java-1.8.0-openjdk-devel.x86_64</span><br><span class="line">java -version</span><br><span class="line"><span class="built_in">which</span> javac</span><br><span class="line">readlink -f /usr/bin/javac</span><br><span class="line"></span><br><span class="line">/etc/profile 맨밑줄 추가</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.201.b09-2.el7_6.x86_64/bin/javac</span><br></pre></td></tr></table></figure><hr><h3 id="2-젠킨스-설치"><a href="#2-젠킨스-설치" class="headerlink" title="2. 젠킨스 설치"></a>2. 젠킨스 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo</span><br><span class="line">rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br><span class="line">yum install jenkins</span><br><span class="line"></span><br><span class="line">vi /etc/sysconfig/jenkins 포트변경 9090</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-자바설치&quot;&gt;&lt;a href=&quot;#1-자바설치&quot; class=&quot;headerlink&quot; title=&quot;1. 자바설치&quot;&gt;&lt;/a&gt;1. 자바설치&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="DevOps" scheme="https://skarlsla.github.io/categories/DevOps/"/>
    
    
      <category term="ci" scheme="https://skarlsla.github.io/tags/ci/"/>
    
      <category term="jenkins" scheme="https://skarlsla.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>[RABBITMQ] reply-to 옵션에 대한 분석</title>
    <link href="https://skarlsla.github.io/2019/04/29/reply-to-%EC%98%B5%EC%85%98%EC%97%90-%EB%8C%80%ED%95%9C-%EB%B6%84%EC%84%9D/"/>
    <id>https://skarlsla.github.io/2019/04/29/reply-to-옵션에-대한-분석/</id>
    <published>2019-04-29T08:18:30.000Z</published>
    <updated>2019-07-15T09:04:01.965Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-rabbitmq-amqp프로토콜-에서-지원하는-reply-to"><a href="#1-rabbitmq-amqp프로토콜-에서-지원하는-reply-to" class="headerlink" title="1. rabbitmq(amqp프로토콜) 에서 지원하는 reply-to"></a>1. rabbitmq(amqp프로토콜) 에서 지원하는 reply-to</h3><p><a href="http://www.rabbitmq.com/direct-reply-to.html" target="_blank" rel="noopener">http://www.rabbitmq.com/direct-reply-to.html</a></p><p>링크 발췌내용 중 사용법</p><p>Use<br>To use direct reply-to, an RPC client should:</p><p>Consume from the pseudo-queue amq.rabbitmq.reply-to in no-ack mode. There is no need to declare this “queue” first, although the client can do so if it wants.<br>Set the reply-to property in their request message to amq.rabbitmq.reply-to.<br>The RPC server will then see a reply-to property with a generated name. It should publish to the default exchange (“”) with the routing key set to this value (i.e. just as if it were sending to a reply queue as usual). The message will then be sent straight to the client consumer.</p><p>If the RPC server is going to perform some expensive computation it might wish to check if the client has gone away. To do this the server can declare the generated reply name first on a disposable channel in order to determine whether it still exists. Note that even if you declare the “queue” with passive=false there is no way to create it; the declare will just succeed (with 0 messages ready and 1 consumer) or fail.</p><p>결론적으로  클라이언트에서 consume(대기큐)를 할때  옵션으로 reply-to = amq.rabbitmq.reply-to 넣고  no-ack 모드로 실행한다.<br>그러면 따로 큐를 생성해 놓지 않더라도 amq.rabbitmq.reply-to 라는 큐가 생성되고  서버에서는 reply-to property를 통해  클라이언트에게 리턴한다. </p><p>서버에서 특이점은 publish 할때 따로 exchange name 을 적지 않고 routingkey 자리에 reply-to에서 온 값을 넣으면된다.<br>서버에서 reply-to 리턴하는 queue를 찍어보면 amq.rabbitmq.reply-to.g2dkAA1yYWJiaXRAdHdlYjAyAAAvugAAAAMB.N2mDRUJksXuxZHf1leTCKg==<br>이런식으로 뒤에 임의의 값이 붙어서 나온다.  여러 서버를 띄어도 저 값은 변하지 않았다.  rabbitmq 서버에서 관리하는 것으로 보인다.     </p><hr><h3 id="2-reply-to를-사용하지-않으면"><a href="#2-reply-to를-사용하지-않으면" class="headerlink" title="2.  reply-to를 사용하지 않으면"></a>2.  reply-to를 사용하지 않으면</h3><p>reply-to 옵션을 쓰지않고 지정된 큐로 작업이 가능하다.<br>ack모드를 사용할수있어 데이터 유지하는 옵션을 사용할수있다.<br>하지만 옵션을 사용시 rabbitmq에서 제공하는 큐생성 및 사용시 추가적인 작업이 필요해 보인다.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-rabbitmq-amqp프로토콜-에서-지원하는-reply-to&quot;&gt;&lt;a href=&quot;#1-rabbitmq-amqp프로토콜-에서-지원하는-reply-to&quot; class=&quot;headerlink&quot; title=&quot;1. rabbitmq(amq
      
    
    </summary>
    
      <category term="RabbitMq" scheme="https://skarlsla.github.io/categories/RabbitMq/"/>
    
    
      <category term="reply-to" scheme="https://skarlsla.github.io/tags/reply-to/"/>
    
  </entry>
  
  <entry>
    <title>[RABBITMQ] RabbitMQ가 재기동 됐을때 대응책</title>
    <link href="https://skarlsla.github.io/2019/04/29/RabbitMQ%EA%B0%80-%EC%9E%AC%EA%B8%B0%EB%8F%99-%EB%90%90%EC%9D%84%EB%95%8C-%EB%8C%80%EC%9D%91%EC%B1%85/"/>
    <id>https://skarlsla.github.io/2019/04/29/RabbitMQ가-재기동-됐을때-대응책/</id>
    <published>2019-04-29T08:14:56.000Z</published>
    <updated>2019-07-15T09:03:34.372Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="RabbitMQ가-재기동-됐을때-대응책"><a href="#RabbitMQ가-재기동-됐을때-대응책" class="headerlink" title="RabbitMQ가 재기동 됐을때 대응책"></a>RabbitMQ가 재기동 됐을때 대응책</h3><p>메시지를 Queue에 넣은 뒤 Consumer에게 전달하기 전에 RabittMQ 서버가 죽는다면 기본적으로 해당 메시지는 날라가버리게 된다. 이런 상황을 방지 하기 위해 durable이라는 개념을 가지고 있다.</p><p>Message durability<br>메시지는 Queue에 보관할 때 file에도 같이 쓰도록 만드는 방법이다.<br>아래와 같은 방법으로 설정해야 동작한다.</p><p>queue생성시 durable속성을 true로 주고 만든다.<br>message publish할때 MessageProperties.PERSISTENT_TEXT_PLAIN을 설정함<br>1,2번 모두 만족해야 메시지가 Queue에 남아있을 때 restart해도 날라가지 않는다.</p><p><img src="https://raw.githubusercontent.com/skarlsla/skarlsla.github.io/master/css/image/q_durable.png" alt="rpc"></p><p>※ 메시지의 persistent는 완변히 보장되진 않음. 메번 메시지마다 fsync 로 동기화히지 않기 때문에 짧은시간이나마 아직 Disk에 쓰여지지 않았을 경우가 있다. 좀더 강력한 방법을 보장하기 위해서는 publisher confirms를 사용</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;RabbitMQ가-재기동-됐을때-대응책&quot;&gt;&lt;a href=&quot;#RabbitMQ가-재기동-됐을때-대응책&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ가 재기동 됐을때 대응책&quot;&gt;&lt;/a&gt;RabbitMQ가 재기동 됐을때 
      
    
    </summary>
    
      <category term="RabbitMq" scheme="https://skarlsla.github.io/categories/RabbitMq/"/>
    
    
  </entry>
  
  <entry>
    <title>[RABBITMQ] RPC(Remote Procedure Call) </title>
    <link href="https://skarlsla.github.io/2019/04/29/RPC/"/>
    <id>https://skarlsla.github.io/2019/04/29/RPC/</id>
    <published>2019-04-29T08:13:45.000Z</published>
    <updated>2019-07-15T09:05:13.900Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="원격-프로시져-호출-RPC"><a href="#원격-프로시져-호출-RPC" class="headerlink" title="원격 프로시져 호출 (RPC)"></a>원격 프로시져 호출 (RPC)</h3><p>RabbitMQ는 Request-Response로 Client와 Server를 이어주기 위해 RPC라는 개념으로 기능을 제공한다.</p><p>RPC라는 거창한 이름을 사용하였지만 실제로는 Client의 request를 Server에 전달하고 , Server가 처리한 결과를 알맞은 Client 요청에 대한 응답으로 전달 할 수 있는 방법을 말한다.</p><p>Message Properties 설명<br>DeliveryMode : persistent인지 transient인지 표시 (휘발성인지 비휘발성인지 구분자)</p><p>ContentType : 내용물의 mime-type</p><p>ReplyTo : Callback Queue의 이름</p><p>CorrelationID : 요청을 구분할 수 있는 유일값</p><p>처리 흐름<br>Client가 CorrelationID, ReplyTo 주어서 RabbitMQ의 특정 Request보관용 Queue에 데이터를 Push한다.</p><p>Request용 Queue에 데이터를 Server에서 Consume하여 요청을 처리한다.</p><p>요청처리 후 Request에서 받은 CorrelationID 와 ReplyTo를 추출하여, 요청ID를 속성으로 갖는 Response를 ReplyToQueue에 Push한다.</p><p>Client는 ReplyTo Queue를 subscribe하고 있다가 Response가 오면 CorrelationID를 보고 어떤 요청에 대한 응답인지를 구분하여 처리한다.</p><hr><h3 id="RPC의-이점"><a href="#RPC의-이점" class="headerlink" title="RPC의 이점"></a>RPC의 이점</h3><p>RPC 구조를 응용하면 아래와 같은 상황에 이점을 얻을 수 있다.</p><p>서버처리 이점<br>서버 처리속도가 느려서 성능을 증가 시키려고 할 때, RPC 서버를 하나 더 두고 같은 Request Queue를 바라보게 하면 됨 ( Round Robin 하므로 )</p><p>Client 이점<br>하나의 메시지를 개별 Round Trip으로 처리를 위해 queueDeclare같은 동기처리 요청이 필요없다. (임시 Queue를 생성하여 Client마다 다른 Queue를 사용하므로)</p><p>RPC 구성시 고려할 점<br>돌아가는 서버가 없을 때 Client 처리<br>요청 Timeout시 Client 처리<br>서버 Exception이나 오동작시 Client에게 이를 어떻게 전달할지<br>Invalid한 데이터가 서버로 전달 되었을 때의 처리</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;원격-프로시져-호출-RPC&quot;&gt;&lt;a href=&quot;#원격-프로시져-호출-RPC&quot; class=&quot;headerlink&quot; title=&quot;원격 프로시져 호출 (RPC)&quot;&gt;&lt;/a&gt;원격 프로시져 호출 (RPC)&lt;/h3&gt;&lt;p&gt;RabbitMQ는 Req
      
    
    </summary>
    
      <category term="RabbitMq" scheme="https://skarlsla.github.io/categories/RabbitMq/"/>
    
    
      <category term="rpc" scheme="https://skarlsla.github.io/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>[RABBITMQ] Persistent, Durable, Ack</title>
    <link href="https://skarlsla.github.io/2019/04/29/Persistent-Durable-Ack/"/>
    <id>https://skarlsla.github.io/2019/04/29/Persistent-Durable-Ack/</id>
    <published>2019-04-29T08:09:10.000Z</published>
    <updated>2019-07-15T09:03:27.427Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-메시지-수신-자동-확인-ack-noAck"><a href="#1-메시지-수신-자동-확인-ack-noAck" class="headerlink" title="1. 메시지 수신 자동 확인(ack , noAck)"></a>1. 메시지 수신 자동 확인(ack , noAck)</h3><p>작업을 수행하는 데 몇 초가 걸릴 수 있습니다. </p><p>소비자 중 한 명이 긴 작업을 시작하고 부분적으로 만 수행되어 사망하는 경우 어떻게되는지 궁금 할 수 있습니다. </p><p>현재의 코드(</p><p>noAck : true<br>)를 사용하면 RabbitMQ가 고객에게 메시지를 전달하면 바로 삭제 표시가됩니다. </p><p>이 경우 작업자를 죽이면 처리중인 메시지가 손실됩니다. </p><p>이 특정 작업자에게 발송되었지만 아직 처리되지 않은 모든 메시지도 손실됩니다.</p><p>noAck : false<br>ack를 전송하지 않고 소비자가 죽거나 (채널이 닫히거나 연결이 끊어 지거나 TCP 연결이 끊어지는 경우),</p><p>RabbitMQ는 메시지가 완전히 처리되지 않았 음을 인식하고 다시 대기합니다.</p><p>가끔씩 사망하더라도 메시지를 잃어 버리지 않을 것입니다.</p><p>메시지 시간 초과가 없습니다. RabbitMQ는 소비자가 사망 할 때 메시지를 재전송합니다. </p><p>메시지 처리가 매우 오랜 시간이 걸리는 경우에도 괜찮습니다.</p><p>앞의 예에서 메시지 수신 확인이 해제되었습니다. 작업을 마친 후 에는  noAck : false    </p><p>옵션 을 사용하여 설정을 해제하고 작업자에게 적절한 응답을 보내야합니다.</p><p>ex) 자동 응답</p><p>ch.consume(q, function(msg) {<br>  var secs = msg.content.toString().split(‘.’).length - 1;</p><p>  console.log(“ [x] Received %s”, msg.content.toString());<br>  setTimeout(function() {<br>    console.log(“ [x] Done”);<br>  }, secs * 1000);<br>}, {noAck: true});</p><p>ex) 자동 미응답 &amp; ack(msg)</p><p>ch.consume(q, function(msg) {<br>  var secs = msg.content.toString().split(‘.’).length - 1;</p><p>  console.log(“ [x] Received %s”, msg.content.toString());<br>  setTimeout(function() {<br>    console.log(“ [x] Done”);<br>    ch.ack(msg);<br>  }, secs * 1000);<br>}, {noAck: false});</p><hr><h3 id="2-메시지-내구성-durable-지속성-persistent"><a href="#2-메시지-내구성-durable-지속성-persistent" class="headerlink" title="2.  메시지 내구성(durable) , 지속성(persistent)"></a>2.  메시지 내구성(durable) , 지속성(persistent)</h3><p>우리는 소비자가 사망하더라도 작업이 손실되지 않도록하는 방법을 배웠습니다.  그러나 RabbitMQ 서버가 중지되면 우리의 작업은 여전히 손실됩니다.</p><p>RabbitMQ가 종료되거나 충돌하면 사용자가 알리지 않는 한 대기열과 메시지를 잊어 버리게됩니다. 메시지가 손실되지 않도록하려면 큐와 메시지를 모두 튼튼하게 표시해야합니다.</p><p>첫째, 우리는 RabbitMQ가 결코 우리 큐를 잃지 않도록해야합니다. 그렇게하기 위해서 우리는 그것을 durable 으로 선언 할 필요가있다 .</p><p>ex) </p><p>큐 할당시 </p><p>ch.assertQueue ( ‘hello’ , { durable : true });<br>큐로 전송시 옵션</p><p>ch.sendToQueue(q, new Buffer(msg), {persistent: true});</p><hr><h3 id="3-최종적으로-구현해야-할-옵션을-포함한-소스"><a href="#3-최종적으로-구현해야-할-옵션을-포함한-소스" class="headerlink" title="3.  최종적으로  구현해야 할 옵션을 포함한  소스"></a>3.  최종적으로  구현해야 할 옵션을 포함한  소스</h3><p>new_task.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">var</span> amqp = <span class="built_in">require</span>(<span class="string">'amqplib/callback_api'</span>);</span><br><span class="line">amqp.connect(<span class="string">'amqp://localhost'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, conn</span>) </span>&#123;</span><br><span class="line">  conn.createChannel(<span class="function"><span class="keyword">function</span>(<span class="params">err, ch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> q = <span class="string">'task_queue'</span>;</span><br><span class="line">    <span class="keyword">var</span> msg = process.argv.slice(<span class="number">2</span>).join(<span class="string">' '</span>) || <span class="string">"Hello World!"</span>;</span><br><span class="line"></span><br><span class="line">    ch.assertQueue(q, &#123;<span class="attr">durable</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    ch.sendToQueue(q, <span class="keyword">new</span> Buffer(msg), &#123;<span class="attr">persistent</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">" [x] Sent '%s'"</span>, msg);</span><br><span class="line">  &#125;);</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; conn.close(); process.exit(<span class="number">0</span>) &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>worker.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">var</span> amqp = <span class="built_in">require</span>(<span class="string">'amqplib/callback_api'</span>);</span><br><span class="line">amqp.connect(<span class="string">'amqp://localhost'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, conn</span>) </span>&#123;</span><br><span class="line">  conn.createChannel(<span class="function"><span class="keyword">function</span>(<span class="params">err, ch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> q = <span class="string">'task_queue'</span>;</span><br><span class="line"></span><br><span class="line">    ch.assertQueue(q, &#123;<span class="attr">durable</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    ch.prefetch(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">" [*] Waiting for messages in %s. To exit press CTRL+C"</span>, q);</span><br><span class="line">    ch.consume(q, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> secs = msg.content.toString().split(<span class="string">'.'</span>).length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">" [x] Received %s"</span>, msg.content.toString());</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">" [x] Done"</span>);</span><br><span class="line">        ch.ack(msg);</span><br><span class="line">      &#125;, secs * <span class="number">1000</span>);</span><br><span class="line">    &#125;, &#123;<span class="attr">noAck</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1-메시지-수신-자동-확인-ack-noAck&quot;&gt;&lt;a href=&quot;#1-메시지-수신-자동-확인-ack-noAck&quot; class=&quot;headerlink&quot; title=&quot;1. 메시지 수신 자동 확인(ack , noAck)&quot;&gt;&lt;/a&gt;1. 메시
      
    
    </summary>
    
      <category term="RabbitMq" scheme="https://skarlsla.github.io/categories/RabbitMq/"/>
    
    
      <category term="rabbitmq" scheme="https://skarlsla.github.io/tags/rabbitmq/"/>
    
  </entry>
  
</feed>
